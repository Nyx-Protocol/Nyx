# ==================================================================================
# GitLab CI/CD - Performance Testing and Benchmarking
# Continuous performance monitoring and regression detection
# ==================================================================================
#
# This configuration provides:
# - Criterion-based Rust benchmarks
# - Go benchmark suite
# - Performance regression detection
# - Historical trend analysis
# - Resource utilization monitoring
#
# ==================================================================================

variables:
  # Benchmark configuration
  CRITERION_HOME: ${CI_PROJECT_DIR}/.criterion
  BENCH_COMPARE_THRESHOLD: "5"  # Alert if performance degrades >5%

# ==================================================================================
# Rust performance benchmarks
# ==================================================================================

# Run Rust benchmarks with Criterion
rust:bench:
  extends: .rust_base
  stage: test
  script:
    - echo "‚ö° Running Rust performance benchmarks"
    - cargo bench --workspace --exclude nyx-sdk-wasm -- --output-format bencher | tee bench-results.txt
    - |
      echo "üìä Benchmark Summary:"
      grep "test result:" bench-results.txt || true
    - echo "‚úÅEBenchmarks completed"
  artifacts:
    expire_in: 1 month
    paths:
      - bench-results.txt
      - target/criterion/
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  timeout: 1h

# Benchmark specific critical components
rust:bench-crypto:
  extends: .rust_base
  stage: test
  script:
    - echo "üîê Benchmarking cryptographic operations"
    - cargo bench -p nyx-crypto -- --output-format bencher | tee crypto-bench.txt
    - echo "‚úÅECrypto benchmarks completed"
  artifacts:
    expire_in: 1 month
    paths:
      - crypto-bench.txt
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "nyx-crypto/**/*"
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

rust:bench-transport:
  extends: .rust_base
  stage: test
  script:
    - echo "üåê Benchmarking network transport"
    - cargo bench -p nyx-transport -- --output-format bencher | tee transport-bench.txt
    - echo "‚úÅETransport benchmarks completed"
  artifacts:
    expire_in: 1 month
    paths:
      - transport-bench.txt
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "nyx-transport/**/*"
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# ==================================================================================
# Go performance benchmarks
# ==================================================================================

go:bench:
  extends: .go_base
  stage: test
  script:
    - cd nyx-http-proxy
    - echo "‚ö° Running Go performance benchmarks"
    - go test -bench=. -benchmem -run=^$ ./... | tee ../go-bench-results.txt
    - |
      echo "üìä Benchmark Summary:"
      grep "Benchmark" ../go-bench-results.txt || true
    - echo "‚úÅEGo benchmarks completed"
  artifacts:
    expire_in: 1 month
    paths:
      - go-bench-results.txt
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "nyx-http-proxy/**/*"

# ==================================================================================
# Performance regression detection
# ==================================================================================

# Compare benchmark results against baseline
perf:regression-check:
  image: alpine:3.19
  stage: .post
  before_script:
    - apk add --no-cache bash bc
  script:
    - echo "üìä Checking for performance regressions"
    - |
      if [ -f bench-results.txt ]; then
        echo "Analyzing Rust benchmarks..."
        # Simple regression detection (compare with previous run)
        # In production, this should compare with historical baseline
        echo "‚ö†ÔøΩEÔøΩE Manual review recommended for performance changes"
      fi
      
      if [ -f go-bench-results.txt ]; then
        echo "Analyzing Go benchmarks..."
        # Check for significant performance changes
        echo "‚ö†ÔøΩEÔøΩE Manual review recommended for performance changes"
      fi
    - echo "‚úÅERegression check completed"
  artifacts:
    expire_in: 1 week
    paths:
      - regression-report.txt
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: on_success
  dependencies:
    - rust:bench
    - go:bench

# ==================================================================================
# Load and stress testing
# ==================================================================================

# Integration performance test with actual network operations
perf:integration:
  extends: .rust_base
  stage: test
  services:
    - name: redis:7-alpine
      alias: redis
  variables:
    REDIS_URL: "redis://redis:6379"
  script:
    - echo "üîÑ Running integration performance tests"
    - cargo test --release --test integration_test -- --nocapture --test-threads=1
    - echo "‚úÅEIntegration performance tests completed"
  artifacts:
    expire_in: 1 week
    paths:
      - integration-perf-results.txt
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  timeout: 45m

# ==================================================================================
# Resource usage profiling
# ==================================================================================

# Profile memory usage and allocation patterns
rust:profile-memory:
  extends: .rust_base
  stage: test
  before_script:
    - cargo install --quiet cargo-bloat
  script:
    - echo "üíæ Profiling binary size and dependencies"
    - cargo bloat --release -p nyx-daemon --crates | tee bloat-report.txt
    - cargo bloat --release -p nyx-cli --crates | tee -a bloat-report.txt
    - |
      echo "üìä Binary Size Summary:"
      ls -lh target/release/nyx-daemon target/release/nyx-cli || true
    - echo "‚úÅEMemory profiling completed"
  artifacts:
    expire_in: 1 month
    paths:
      - bloat-report.txt
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

# ==================================================================================
# Benchmark reporting and visualization
# ==================================================================================

# Generate comprehensive performance report
perf:report:
  image: alpine:3.19
  stage: .post
  before_script:
    - apk add --no-cache bash
  script:
    - echo "üìà Generating performance report"
    - |
      cat <<EOF > performance-report.md
      # Performance Benchmark Report
      
      **Pipeline**: $CI_PIPELINE_ID
      **Commit**: $CI_COMMIT_SHORT_SHA
      **Branch**: $CI_COMMIT_REF_NAME
      **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
      
      ## Benchmark Results
      
      ### Rust Benchmarks
      $(test -f bench-results.txt && echo "\`\`\`" && tail -20 bench-results.txt && echo "\`\`\`" || echo "‚è≠ÔøΩEÔøΩE Not run in this pipeline")
      
      ### Go Benchmarks  
      $(test -f go-bench-results.txt && echo "\`\`\`" && tail -20 go-bench-results.txt && echo "\`\`\`" || echo "‚è≠ÔøΩEÔøΩE Not run in this pipeline")
      
      ### Binary Sizes
      $(test -f bloat-report.txt && echo "\`\`\`" && head -30 bloat-report.txt && echo "\`\`\`" || echo "‚è≠ÔøΩEÔøΩE Not run in this pipeline")
      
      ## Performance Trends
      
      - Monitor for regressions > ${BENCH_COMPARE_THRESHOLD}%
      - Review cryptographic operation performance
      - Track memory allocation patterns
      
      ## Recommendations
      
      1. Compare with baseline metrics
      2. Investigate any significant performance changes
      3. Profile hot paths if regressions detected
      4. Optimize critical paths identified in benchmarks
      
      ---
      *Generated by GitLab CI/CD Performance Pipeline*
      EOF
    - cat performance-report.md
    - echo "‚úÅEPerformance report generated"
  artifacts:
    expire_in: 1 month
    paths:
      - performance-report.md
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - when: on_success
