replicaCount: 1

image:
  repository: ghcr.io/seleniaproject/nyx-daemon
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []

service:
  type: ClusterIP
  port: 43300
  metricsPort: 9090
  annotations: {}
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  sessionAffinity: None

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: nyx.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  # - secretName: nyx-tls
  #   hosts:
  #     - nyx.example.com

# Prometheus exporter / readiness probe port
exporter:
  port: 9090

# ServiceMonitor (Prometheus Operator) configuration
serviceMonitor:
  enabled: false
  interval: 15s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}
  scheme: http

# PodDisruptionBudget configuration
pdb:
  enabled: true
  minAvailable: 1

# HorizontalPodAutoscaler configuration
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 75
  targetBytesPerSecond: "5Mi"
  enableCustomPodsMetric: false

# Pod security context (seccomp)
podSecurity:
  # Localhost seccomp profile name mounted via projected volume or node default path
  seccompProfile: "nyx-seccomp-bpf.json"

securityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

serviceAccount:
  create: true
  name: ""
  annotations: {}

rbac:
  create: false

podAnnotations: {}
podLabels: {}

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []
priorityClassName: ""
terminationGracePeriodSeconds: 30

imagePullSecrets: []

# Nyx daemon configuration projected as ConfigMap and mounted into the pod.
config:
  enabled: true
  mountPath: /etc/nyx
  fileName: config.toml
  # Example minimal configuration. Override as needed.
  data: |
    listen_port = 43300
    log_level = "info"
    [mix]
    hop_count = 5
    cover_traffic_rate = 10.0
    [transport]
    quic_enabled = true
    tcp_fallback = true

secrets:
  create: true
  name: ""
  apiTokenKey: NYX_CONTROL_TOKEN
  apiTokenValue: ""
  extraEnv: []
  # - name: SOME_SECRET
  #   valueFrom:
  #     secretKeyRef:
  #       name: my-secret
  #       key: key

extraEnv: []
extraEnvFrom: []
extraVolumes: []
extraVolumeMounts: []
extraInitContainers: []
extraContainers: []

# NetworkPolicy baseline: deny-all with explicit allowances
networkPolicy:
  enabled: false
  allowIngressFromNamespaces: []
  # - name: monitoring
  #   namespaceSelector: { matchLabels: { kubernetes.io/metadata.name: monitoring } }
  allowEgressDNS: true
  additionalIngressRules: []
  additionalEgressRules: []

# Cloud provider specific hints (optional)
cloud:
  provider: ""
  # provider: aws|gcp|azure (used only to help with example annotations)
  annotations: {}

# Use StatefulSet instead of Deployment for stable Pod identities (optional)
stateful:
  enabled: false

# Example of spreading pods across nodes and zones (uncomment to enable)
# topologySpreadConstraints:
#   - maxSkew: 1
#     topologyKey: kubernetes.io/hostname
#     whenUnsatisfiable: ScheduleAnyway
#     labelSelector:
#       matchLabels:
#         app.kubernetes.io/name: nyx
#   - maxSkew: 1
#     topologyKey: topology.kubernetes.io/zone
#     whenUnsatisfiable: ScheduleAnyway
#     labelSelector:
#       matchLabels:
#         app.kubernetes.io/name: nyx

# Benchmark job configuration (disabled by default)
bench:
  enabled: false
  # Default to a tiny image with /bin/sh for simple connectivity checks.
  image: alpine:3.19
  imagePullPolicy: IfNotPresent
  # Example: run a simple connectivity/throughput probe using nyx-cli or a custom tool.
  command: ["/bin/sh","-lc"]
  args:
    - |
      echo "Target service: ${TARGET_SERVICE}:${TARGET_PORT}";
      echo "DNS check (service)";
      (command -v getent >/dev/null 2>&1 && getent hosts "${TARGET_SERVICE}") \
        || (command -v nslookup >/dev/null 2>&1 && nslookup "${TARGET_SERVICE}") \
        || true;
      echo "DNS check (headless)";
      (command -v getent >/dev/null 2>&1 && getent hosts "${TARGET_HEADLESS}") \
        || (command -v nslookup >/dev/null 2>&1 && nslookup "${TARGET_HEADLESS}") \
        || true;
      echo "TCP connectivity probe (may fail if service doesn't accept plain TCP):";
      (command -v nc >/dev/null 2>&1 && nc -vz -w 2 "${TARGET_SERVICE}" "${TARGET_PORT}") || true;
      echo "Starting benchmark stub...";
      # TODO: replace with real nyx-cli traffic generator once available
      sleep 2;
      echo "OK";
  env: []
  resources: {}