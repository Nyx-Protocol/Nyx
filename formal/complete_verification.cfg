\* Complete verification configuration for all Nyx protocol modules
\* This configuration provides comprehensive model checking parameters

SPECIFICATION IntegratedFairSpec

\* ==================================================
\* CONSTANTS - Comprehensive Configuration
\* ==================================================

\* Network topology
CONSTANTS
    n1, n2, n3, n4, n5, n6, n7, n8, n9, n10 = n1, n2, n3, n4, n5, n6, n7, n8, n9, n10
    Nodes <- {n1, n2, n3, n4, n5, n6, n7, n8, n9, n10}
    
\* Links (fully connected for testing)
CONSTANTS
    Links <- {
        [source |-> n1, dest |-> n2, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n2, dest |-> n3, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n3, dest |-> n4, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n4, dest |-> n5, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n5, dest |-> n6, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n6, dest |-> n7, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n7, dest |-> n8, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n8, dest |-> n9, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n9, dest |-> n10, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0],
        [source |-> n10, dest |-> n1, bandwidth |-> 100, latency |-> 10, loss_rate |-> 0]
    }

\* Adversary (Byzantine nodes)
CONSTANTS
    Adversary <- {n9, n10}
    ByzantineNodes <- {n9, n10}

\* System parameters
CONSTANTS
    MaxPacketSize = 1500
    MaxWindowSize = 65535
    MaxBandwidth = 1000
    MinRTT = 10
    MaxRTT = 500
    MaxPathLength = 7
    MaxQueueSize = 1000
    TimeoutThreshold = 100
    QoSLevels = {0, 1, 2, 3}
    
\* Connection and stream limits
CONSTANTS
    Connections <- {<<n1, n5>>, <<n2, n6>>, <<n3, n7>>, <<n4, n8>>}
    MaxStreamsPerConn = 100
    MaxStreamData = 10000
    MaxPriority = 7
    MaxConcurrentStreams = 400
    StreamQuota = 100
    DataQuota = 1000
    TimeQuantum = 10
    
\* Cryptography parameters
CONSTANTS
    MaxKeyAge = 3600
    MaxNonce = 1000000
    HashFunctions = {"SHA3_256", "SHA3_512", "BLAKE3"}
    CipherSuites = {
        [kex |-> "X25519_Kyber768", cipher |-> "ChaCha20Poly1305", 
         hash |-> "SHA3_256", mac |-> "Poly1305", kdf |-> "HKDF_SHA3_256"]
    }
    SecurityParameter = 128
    
\* Fault tolerance parameters
CONSTANTS
    MaxFailures = 3
    HeartbeatInterval = 30
    MaxRetries = 3
    CheckpointInterval = 100
    MaxPathsPerRoute = 3
    
\* Protocol parameters
CONSTANTS
    MaxConnections = 50
    MaxTime = 10000
    ProtocolVersion = 1

\* Message space (simplified for model checking)
CONSTANTS
    Messages <- {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

\* ==================================================
\* INVARIANTS - All Safety Properties
\* ==================================================

\* Crypto layer invariants
INVARIANT CryptoTypeOK
INVARIANT ForwardSecrecy
INVARIANT KCIResistance
INVARIANT ReplayResistance
INVARIANT MutualAuthentication
INVARIANT Confidentiality

\* Network layer invariants
INVARIANT NetworkTypeOK
INVARIANT NoPacketLoops
INVARIANT FlowConservation
INVARIANT PacketOrdering
INVARIANT WindowConstraints

\* Stream layer invariants
INVARIANT StreamTypeOK
INVARIANT ResourceBounds
INVARIANT StateMachineCorrect
INVARIANT FlowControlCorrect
INVARIANT UniqueStreamIDs
INVARIANT BlockedStreamsCantSend

\* Fault tolerance invariants
INVARIANT FaultToleranceTypeOK
INVARIANT BoundedFailures
INVARIANT ServiceAvailability
INVARIANT NoFalsePositives

\* Security property invariants
INVARIANT SecurityTypeOK
INVARIANT NoUnauthorizedDecryption
INVARIANT AnonymitySetBound
INVARIANT ForwardSecrecyMaintained
INVARIANT TrafficAnalysisResistant
INVARIANT MetadataProtected

\* Integrated protocol invariants
INVARIANT IntegratedTypeOK
INVARIANT RefinementHolds
INVARIANT AllPropertiesSatisfied
INVARIANT CrossLayerConsistency
INVARIANT PerformanceAcceptable

\* ==================================================
\* PROPERTIES - Temporal Properties
\* ==================================================

\* Crypto layer liveness
PROPERTY EventuallySecure
PROPERTY KeyRotationProgress

\* Network layer liveness
PROPERTY EventualDelivery
PROPERTY WindowGrowth
PROPERTY NoDeadlock

\* Stream layer liveness
PROPERTY NoStarvation
PROPERTY FairScheduling

\* Fault tolerance liveness
PROPERTY EventualRecovery
PROPERTY HeartbeatProgress
PROPERTY SystemProgress

\* Integrated protocol liveness
PROPERTY MessageDelivery
PROPERTY ConnectionEstablishment
PROPERTY FailureRecovery

\* ==================================================
\* VIEW - State Space Reduction
\* ==================================================

\* Use symmetry to reduce state space
VIEW
    <<
        \* Crypto state (essential parts)
        [n \in Nodes |-> concrete_state.crypto.handshake_state[n]],
        
        \* Network state (essential parts)
        Cardinality(concrete_state.network.in_flight_packets),
        
        \* Stream state (essential parts)
        concrete_state.streams.stream_count,
        
        \* Fault tolerance state (essential parts)
        [n \in Nodes |-> concrete_state.fault_tolerance.node_state[n]],
        
        \* Security state (essential parts)
        Cardinality(concrete_state.security.adversary_knowledge[n9]),
        
        \* Protocol phase
        protocol_phase,
        
        \* Global time (modulo reduction)
        global_time % 1000
    >>

\* ==================================================
\* SYMMETRY - Permutation Symmetry
\* ==================================================

\* Nodes are symmetric (except adversary)
SYMMETRY 
    Permutations({n1, n2, n3, n4, n5, n6, n7, n8}) 

\* ==================================================
\* STATE CONSTRAINT - Bounded Model Checking
\* ==================================================

STATE_CONSTRAINT
    /\ global_time <= 100
    /\ Cardinality(concrete_state.network.in_flight_packets) <= 50
    /\ concrete_state.streams.stream_count <= 20
    /\ Cardinality(concrete_state.fault_tolerance.failures) <= MaxFailures
    /\ Cardinality(abstract_state.messages) <= 30

\* ==================================================
\* ACTION CONSTRAINT - Limit Non-Determinism
\* ==================================================

ACTION_CONSTRAINT
    /\ \/ protocol_phase # "ACTIVE"
       \/ Cardinality(concrete_state.network.in_flight_packets) < 40
    /\ \/ concrete_state.streams.stream_count < MaxConcurrentStreams - 10
       \/ protocol_phase = "CLOSING"

\* ==================================================
\* ALIAS - Trace Information
\* ==================================================

ALIAS
    [
        \* Protocol statistics
        active_connections |-> Cardinality({c \in DOMAIN abstract_state.connections :
                                           abstract_state.connections[c].is_secure}),
        messages_in_flight |-> Cardinality(concrete_state.network.in_flight_packets),
        active_streams |-> concrete_state.streams.stream_count,
        failed_nodes |-> Cardinality({n \in Nodes :
                                     concrete_state.fault_tolerance.node_state[n] = "FAILED"}),
        
        \* Security metrics
        security_level |-> abstract_state.security_level,
        compromised_keys |-> Cardinality(concrete_state.security.compromised_keys),
        anonymity_entropy |-> security_parameter_time,
        
        \* Performance metrics
        average_latency |-> IF goodput > 0 THEN end_to_end_latency / goodput ELSE 0,
        total_goodput |-> goodput,
        
        \* Verification metrics
        refinement_valid |-> refinement_valid,
        properties_satisfied |-> properties_satisfied,
        
        \* Time
        current_time |-> global_time
    ]

\* ==================================================
\* TLC OPTIONS
\* ==================================================

\* Use multiple worker threads for faster checking
\* -workers auto

\* Depth-first search for liveness checking
\* -dfid 100

\* Simulation mode for long traces
\* -simulate num=10000,trace

\* Coverage tracking
\* -coverage 1

\* Checkpoint directory
\* -checkpoint 60

\* Deadlock check
\* -deadlock

\* Profiling
\* -tool
