#![forbid(unsafe_code)]
#![allow(clippy::large_enum_variant)] // Generated protobuf code

//! Generated gRPC protobuf types and client stubs.
//!
//! This module wraps the code generated by tonic-build from `proto/control.proto`.
//! All types and services are re-exported for convenient access.

// Include generated protobuf code (nyx.api module)
// Generated by tonic-build in build.rs
tonic::include_proto!("nyx.api");

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_node_info_creation() {
        let info = NodeInfo {
            node_id: "test-node-123".to_string(),
            version: "0.1.0".to_string(),
            uptime_sec: 3600,
            bytes_in: 1000,
            bytes_out: 2000,
            pid: 12345,
            active_streams: 15,
            connected_peers: 10,
            mix_routes: vec!["route1".to_string(), "route2".to_string()],
            performance: None,
            resources: None,
            topology: None,
        };
        assert_eq!(info.node_id, "test-node-123");
        assert_eq!(info.active_streams, 15);
    }

    #[test]
    fn test_session_status_request() {
        let req = SessionStatusRequest { session_id: 123 };
        assert_eq!(req.session_id, 123);
    }

    #[test]
    fn test_open_stream_request() {
        let req = OpenRequest {
            stream_name: "test-stream".to_string(),
            target_address: "example.com:443".to_string(),
            options: None,
        };
        assert_eq!(req.stream_name, "test-stream");
        assert_eq!(req.target_address, "example.com:443");
    }

    #[test]
    fn test_data_request() {
        let data = vec![1, 2, 3, 4, 5];
        let req = DataRequest {
            stream_id: "stream-123".to_string(),
            data: data.clone(),
        };
        assert_eq!(req.stream_id, "stream-123");
        assert_eq!(req.data, data);
    }

    #[test]
    fn test_event_filter() {
        let filter = EventFilter {
            types: vec!["stream".to_string(), "connection".to_string()],
            stream_ids: vec![1, 2, 3],
            severity: "info".to_string(),
        };
        assert_eq!(filter.types.len(), 2);
        assert_eq!(filter.stream_ids.len(), 3);
        assert_eq!(filter.severity, "info");
    }
}
