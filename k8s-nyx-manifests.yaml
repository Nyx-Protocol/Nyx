---
# Namespace for NyxNet testing
apiVersion: v1
kind: Namespace
metadata:
  name: nyx-test
  labels:
    name: nyx-test
---
# ConfigMap for NyxNet configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nyx-config
  namespace: nyx-test
data:
  nyx.toml: |
    [node]
    node_id = "PLACEHOLDER_NODE_ID"
    listen_addr = "0.0.0.0:9000"

    [crypto]
    use_pq_crypto = true
    key_exchange = "hybrid"
    session_key_rotation_interval = 3600

    [mix]
    enabled = true
    num_hops = 3
    path_selection = "weighted"

    [mix.cover_traffic]
    enabled = true
    lambda = 5.0
    adaptive = true
    low_power_mode = false

    [transport]
    protocol = "quic"
    udp_port = 9001
    multipath = true
    timeout_secs = 30

    [transport.nat]
    ice_lite = true
    teredo = true

    [fec]
    enabled = true
    algorithm = "reed_solomon"
    data_shards = 8
    parity_shards = 4
    adaptive = true

    [proxy]
    enabled = true
    socks5_addr = "0.0.0.0:9050"
    http_addr = "0.0.0.0:8080"
    force_mix_routing = true

    [api]
    grpc_addr = "0.0.0.0:9000"
    reflection = true

    [telemetry]
    enabled = true
    prometheus_addr = "0.0.0.0:9090"

    [logging]
    level = "info"
    format = "json"

    [security]
    replay_protection = true
    bloom_filter_size = 1000000
    nonce_timeout = 300

    [testing]
    test_mode = true
    verbose = true
---
# DaemonSet to run nyx-daemon on every node
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nyx-daemon
  namespace: nyx-test
  labels:
    app: nyx-daemon
spec:
  selector:
    matchLabels:
      app: nyx-daemon
  template:
    metadata:
      labels:
        app: nyx-daemon
    spec:
      hostNetwork: true  # Use host network for Mix Network connectivity
      containers:
      - name: nyx-daemon
        image: nyxnet-test:latest
        imagePullPolicy: Never  # Use locally built image
        command: ["/usr/local/bin/nyx-daemon"]
        args:
          - "--config"
          - "/etc/nyx/nyx.toml"
        ports:
        - name: grpc
          containerPort: 9000
          protocol: TCP
        - name: quic
          containerPort: 9001
          protocol: UDP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: nyx-config
          mountPath: /etc/nyx
        - name: nyx-data
          mountPath: /var/lib/nyx
        - name: host-tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Liveness probe: Check if Unix socket exists and is responsive
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -S /tmp/nyx.sock"
          initialDelaySeconds: 10
          periodSeconds: 10
        # Readiness probe: Check if daemon is accepting connections
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - "test -S /tmp/nyx.sock"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nyx-config
        configMap:
          name: nyx-config
      - name: nyx-data
        emptyDir: {}
      - name: host-tmp
        hostPath:
          path: /tmp
          type: Directory
---
# Service for nyx-daemon gRPC API
apiVersion: v1
kind: Service
metadata:
  name: nyx-daemon
  namespace: nyx-test
  labels:
    app: nyx-daemon
spec:
  type: ClusterIP
  selector:
    app: nyx-daemon
  ports:
  - name: grpc
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
---
# DaemonSet for nyx-http-proxy (SOCKS5/HTTP proxy on each node)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nyx-proxy
  namespace: nyx-test
  labels:
    app: nyx-proxy
spec:
  selector:
    matchLabels:
      app: nyx-proxy
  template:
    metadata:
      labels:
        app: nyx-proxy
    spec:
      containers:
      - name: nyx-proxy
        image: nyxnet-test:latest
        imagePullPolicy: Never
        command: ["/usr/local/bin/nyx-http-proxy"]
        args:
          - "-ipc"
          - "/tmp/nyx.sock"
          - "-socks5"
          - "0.0.0.0:9050"
          - "-http"
          - "0.0.0.0:8080"
        ports:
        - name: socks5
          containerPort: 9050
          protocol: TCP
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: NYX_DAEMON_SOCKET
          value: "unix:///tmp/nyx.sock"
        volumeMounts:
        - name: nyx-socket
          mountPath: /tmp
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        # Liveness probe: Check if SOCKS5 port is responding
        livenessProbe:
          tcpSocket:
            port: 9050
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 5
        # Readiness probe: Check if proxy is ready to accept connections
        readinessProbe:
          tcpSocket:
            port: 9050
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 3
      # Use hostPath to access daemon's Unix socket on the same node
      hostNetwork: false
      volumes:
      - name: nyx-socket
        hostPath:
          path: /tmp
          type: Directory
---
# Service for nyx-http-proxy
apiVersion: v1
kind: Service
metadata:
  name: nyx-proxy
  namespace: nyx-test
  labels:
    app: nyx-proxy
spec:
  type: NodePort
  selector:
    app: nyx-proxy
  ports:
  - name: socks5
    port: 9050
    targetPort: 9050
    nodePort: 30050
    protocol: TCP
  - name: http
    port: 8080
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
---
# Test Pod with curl and network tools
apiVersion: v1
kind: Pod
metadata:
  name: test-client
  namespace: nyx-test
  labels:
    app: test-client
spec:
  containers:
  - name: test-client
    image: nicolaka/netshoot:latest
    command: ["sleep", "infinity"]
    env:
    - name: http_proxy
      value: "http://nyx-proxy:8080"
    - name: https_proxy
      value: "http://nyx-proxy:8080"
    - name: SOCKS5_PROXY
      value: "socks5://nyx-proxy:9050"
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
---
# Service Monitor for Prometheus (optional)
apiVersion: v1
kind: Service
metadata:
  name: nyx-metrics
  namespace: nyx-test
  labels:
    app: nyx-daemon
    prometheus: enabled
spec:
  type: ClusterIP
  selector:
    app: nyx-daemon
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
