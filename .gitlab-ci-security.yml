# ==================================================================================
# GitLab CI/CD - Security and Compliance Configuration
# Enhanced security scanning and compliance reporting
# ==================================================================================
#
# This configuration provides comprehensive security controls:
# - SAST with multiple rulesets
# - Dependency vulnerability scanning
# - Secret detection
# - License compliance
# - Container scanning
# - SBOM generation
#
# All tools selected to avoid C/C++ dependencies per project constraints
# ==================================================================================

# Security-specific variables
variables:
  # Semgrep configuration for comprehensive security analysis
  SEMGREP_TIMEOUT: "300"
  SEMGREP_MAX_MEMORY: "8000"
  
  # Container scanning
  CS_ANALYZER_IMAGE: "registry.gitlab.com/security-products/container-scanning:5"
  
  # Dependency scanning
  DS_EXCLUDED_ANALYZERS: "gemnasium-python"  # We use cargo-audit and govulncheck instead

# ==================================================================================
# Advanced SAST with multiple security rulesets
# ==================================================================================

# Rust-specific security analysis
semgrep:rust-security:
  extends: .security_base
  stage: security
  script:
    - echo "üîí Running Rust security analysis"
    - semgrep scan --config=p/rust --config=p/security-audit --json --output=rust-security.json .
    - semgrep scan --config=p/rust --config=p/security-audit --gitlab-sast > rust-sast-report.json || true
    - echo "‚úÖ Rust security scan completed"
  artifacts:
    expire_in: 1 month
    reports:
      sast: rust-sast-report.json
    paths:
      - rust-security.json
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "**/*.rs"
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Go-specific security analysis
semgrep:go-security:
  extends: .security_base
  stage: security
  script:
    - echo "üîí Running Go security analysis"
    - semgrep scan --config=p/golang --config=p/security-audit --json --output=go-security.json nyx-http-proxy/
    - echo "‚úÖ Go security scan completed"
  artifacts:
    expire_in: 1 month
    paths:
      - go-security.json
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "nyx-http-proxy/**/*.go"
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# OWASP Top 10 security checks
semgrep:owasp:
  extends: .security_base
  stage: security
  script:
    - echo "üîí Running OWASP Top 10 security checks"
    - semgrep scan --config=p/owasp-top-ten --json --output=owasp-report.json .
    - echo "‚úÖ OWASP scan completed"
  artifacts:
    expire_in: 1 month
    paths:
      - owasp-report.json
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# ==================================================================================
# Supply chain security
# ==================================================================================

# Check for known vulnerabilities in Rust dependencies with detailed reporting
rust:vuln-detailed:
  extends: .rust_base
  stage: security
  before_script:
    - cargo install --quiet cargo-audit
  script:
    - echo "üîí Detailed Rust dependency vulnerability analysis"
    - cargo audit --json > cargo-audit-detailed.json || true
    - cargo audit --deny warnings || echo "‚ö†Ô∏è  Vulnerabilities found - review required"
    - |
      if [ -f cargo-audit-detailed.json ]; then
        echo "üìä Vulnerability Summary:"
        cat cargo-audit-detailed.json | grep -o '"id":"[^"]*"' | sort -u || true
      fi
    - echo "‚úÖ Vulnerability analysis completed"
  artifacts:
    expire_in: 1 month
    paths:
      - cargo-audit-detailed.json
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# License compliance check
rust:license-check:
  extends: .rust_base
  stage: security
  before_script:
    - cargo install --quiet cargo-license
  script:
    - echo "‚öñÔ∏è  Checking dependency licenses"
    - cargo license --json > licenses.json
    - cargo license --tsv > licenses.tsv
    - |
      echo "üìã License Summary:"
      cargo license | grep -E "(MIT|Apache|BSD)" || true
      echo "‚ùå Checking for problematic licenses:"
      cargo license | grep -vE "(MIT|Apache|BSD|ISC|Unlicense|Zlib)" || echo "‚úÖ No problematic licenses found"
    - echo "‚úÖ License check completed"
  artifacts:
    expire_in: 1 month
    paths:
      - licenses.json
      - licenses.tsv
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# ==================================================================================
# Container security scanning
# ==================================================================================

# Scan Docker images for vulnerabilities using Trivy (Go-based, no C/C++)
# Note: Runs in package stage after docker:build completes
container:scan:
  image: aquasec/trivy:latest
  stage: package
  needs:
    - job: docker:build
      artifacts: false
  script:
    - echo "Scanning Docker image for vulnerabilities"
    - trivy image --severity HIGH,CRITICAL --no-progress --format json --output trivy-report.json nyx:${CI_COMMIT_SHORT_SHA} || true
    - trivy image --severity HIGH,CRITICAL --no-progress nyx:${CI_COMMIT_SHORT_SHA} || true
    - echo "Container scan completed"
  artifacts:
    expire_in: 1 month
    paths:
      - trivy-report.json
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  tags:
    - docker

# ==================================================================================
# Compliance and audit logging
# ==================================================================================

# Generate comprehensive security report
security:report:
  image: alpine:3.19
  stage: .post
  before_script:
    - apk add --no-cache jq
  script:
    - echo "üìä Generating comprehensive security report"
    - |
      cat <<EOF > security-report.md
      # Security Scan Report
      
      **Pipeline**: $CI_PIPELINE_ID
      **Commit**: $CI_COMMIT_SHORT_SHA
      **Branch**: $CI_COMMIT_REF_NAME
      **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
      
      ## Scan Results
      
      ### SAST (Semgrep)
      - Rust security scan: $(test -f rust-security.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      - Go security scan: $(test -f go-security.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      - OWASP Top 10: $(test -f owasp-report.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      
      ### Dependency Scanning
      - Cargo audit: $(test -f cargo-audit-detailed.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      - License compliance: $(test -f licenses.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      
      ### Container Scanning
      - Trivy scan: $(test -f trivy-report.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      
      ### Secret Detection
      - Semgrep secrets: $(test -f semgrep-secrets.json && echo "‚úÖ Completed" || echo "‚è≠Ô∏è  Skipped")
      
      ## Recommendations
      
      1. Review all HIGH and CRITICAL findings
      2. Update vulnerable dependencies
      3. Address any exposed secrets immediately
      4. Verify license compliance before release
      
      ---
      *Generated by GitLab CI/CD Security Pipeline*
      EOF
    - cat security-report.md
    - echo "‚úÖ Security report generated"
  artifacts:
    expire_in: 1 month
    paths:
      - security-report.md
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: on_success
  tags:
    - docker

# ==================================================================================
# Scheduled security audits (weekly)
# ==================================================================================

# Comprehensive weekly security audit
security:weekly-audit:
  extends: .rust_base
  stage: security
  before_script:
    - cargo install --quiet cargo-audit cargo-outdated
  script:
    - echo "üîí Running weekly comprehensive security audit"
    - cargo audit
    - cargo outdated --root-deps-only
    - echo "‚úÖ Weekly audit completed"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  allow_failure: false
