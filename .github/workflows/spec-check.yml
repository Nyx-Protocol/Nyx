name: Spec Consistency Check

# Validates consistency between spec/ and docs/specs.md
# Detects spec drift, missing implementations, and outdated documentation

on:
  schedule:
    # Run every Sunday at 3:00 AM UTC
    - cron: '0 3 * * 0'
  
  pull_request:
    paths:
      - 'spec/**'
      - 'docs/specs.md'
      - 'docs/capability_negotiation_traceability.md'
      - 'scripts/check_spec_consistency.py'
      - '.github/workflows/spec-check.yml'
  
  push:
    branches:
      - main
    paths:
      - 'spec/**'
      - 'docs/specs.md'
  
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  issues: write  # For creating issues on inconsistencies

jobs:
  check-consistency:
    name: Check Spec Consistency
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for diff analysis
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # No external dependencies needed (uses stdlib only)
      
      - name: Run spec consistency checker
        id: check
        run: |
          python scripts/check_spec_consistency.py \
            --workspace . \
            --output-dir target/spec-check \
            --verbose
        continue-on-error: true  # Don't fail workflow immediately
      
      - name: Upload consistency report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spec-consistency-report
          path: |
            target/spec-check/consistency_report.md
            target/spec-check/consistency_report.json
          retention-days: 90
      
      - name: Check for inconsistencies
        id: parse-report
        if: always()
        run: |
          if [ -f target/spec-check/consistency_report.json ]; then
            # Parse JSON report for issue creation
            TOTAL_ISSUES=$(jq -r '.total_issues' target/spec-check/consistency_report.json)
            MISSING_IN_DOCS=$(jq -r '.missing_in_docs | length' target/spec-check/consistency_report.json)
            MISSING_IN_SPEC=$(jq -r '.missing_in_spec | length' target/spec-check/consistency_report.json)
            
            echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            echo "missing_in_docs=$MISSING_IN_DOCS" >> $GITHUB_OUTPUT
            echo "missing_in_spec=$MISSING_IN_SPEC" >> $GITHUB_OUTPUT
            
            if [ "$TOTAL_ISSUES" -gt 0 ]; then
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "total_issues=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Issue on inconsistencies
        if: |
          always() && 
          steps.parse-report.outputs.has_issues == 'true' && 
          github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'target/spec-check/consistency_report.json';
            
            if (!fs.existsSync(reportPath)) {
              console.log('No report found, skipping issue creation');
              return;
            }
            
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            // Build issue body
            let body = `## Spec Consistency Check Results\n\n`;
            body += `**Timestamp**: ${new Date().toISOString()}\n`;
            body += `**Workflow Run**: [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
            body += `---\n\n`;
            
            body += `### Summary\n\n`;
            body += `| Metric | Count |\n`;
            body += `|--------|-------|\n`;
            body += `| Total Features | ${report.total_features} |\n`;
            body += `| Total Issues | ${report.total_issues} |\n`;
            body += `| Missing in docs/specs.md | ${report.missing_in_docs.length} |\n`;
            body += `| Missing in spec/ | ${report.missing_in_spec.length} |\n`;
            body += `| Errors | ${report.errors.length} |\n\n`;
            
            // Missing in docs
            if (report.missing_in_docs.length > 0) {
              body += `### ⚠️ Features Defined in Spec but Missing from docs/specs.md\n\n`;
              body += `<details>\n<summary>Show ${report.missing_in_docs.length} missing features</summary>\n\n`;
              body += `| Section | Feature | Source |\n`;
              body += `|---------|---------|--------|\n`;
              for (const feat of report.missing_in_docs.slice(0, 50)) {  // Limit to 50
                body += `| ${feat.section} | ${feat.title} | ${feat.file}:${feat.line} |\n`;
              }
              if (report.missing_in_docs.length > 50) {
                body += `\n*...and ${report.missing_in_docs.length - 50} more*\n`;
              }
              body += `\n</details>\n\n`;
            }
            
            // Missing in spec
            if (report.missing_in_spec.length > 0) {
              body += `### ⚠️ Implementation Entries Without Spec Reference\n\n`;
              body += `<details>\n<summary>Show ${report.missing_in_spec.length} orphaned entries</summary>\n\n`;
              body += `| Feature | Category | Status |\n`;
              body += `|---------|----------|--------|\n`;
              for (const impl of report.missing_in_spec.slice(0, 50)) {
                body += `| ${impl.feature} | ${impl.category} | ${impl.status} |\n`;
              }
              if (report.missing_in_spec.length > 50) {
                body += `\n*...and ${report.missing_in_spec.length - 50} more*\n`;
              }
              body += `\n</details>\n\n`;
            }
            
            // Implementation status summary
            if (report.status_summary) {
              body += `### Implementation Status Summary\n\n`;
              body += `| Status | Count | Percentage |\n`;
              body += `|--------|-------|------------|\n`;
              const total = report.total_features;
              for (const [status, count] of Object.entries(report.status_summary)) {
                const pct = total > 0 ? (count / total * 100).toFixed(1) : '0.0';
                body += `| ${status} | ${count} | ${pct}% |\n`;
              }
              body += `\n`;
            }
            
            // Protocol version progress
            if (report.version_progress && Object.keys(report.version_progress).length > 0) {
              body += `### Protocol Version Progress\n\n`;
              body += `| Version | Progress |\n`;
              body += `|---------|----------|\n`;
              for (const [version, progress] of Object.entries(report.version_progress)) {
                body += `| ${version} | ${progress}% |\n`;
              }
              body += `\n`;
            }
            
            body += `---\n\n`;
            body += `### Action Items\n\n`;
            body += `1. Review missing features and update \`docs/specs.md\` with implementation status\n`;
            body += `2. Verify orphaned implementation entries and add spec references if needed\n`;
            body += `3. Update protocol version progress if implementations have changed\n\n`;
            body += `**Download full report**: [Workflow Artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'spec-drift',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Spec Consistency Check')
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## New Spec Consistency Check Results\n\n${body}`
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Spec Consistency Check: ${report.total_issues} issues found`,
                body: body,
                labels: ['documentation', 'spec-drift', 'needs-attention']
              });
              console.log(`Created issue #${issue.data.number}`);
            }
      
      - name: Post summary to workflow
        if: always()
        run: |
          echo "## Spec Consistency Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f target/spec-check/consistency_report.json ]; then
            TOTAL_FEATURES=$(jq -r '.total_features' target/spec-check/consistency_report.json)
            TOTAL_ISSUES=$(jq -r '.total_issues' target/spec-check/consistency_report.json)
            MISSING_DOCS=$(jq -r '.missing_in_docs | length' target/spec-check/consistency_report.json)
            MISSING_SPEC=$(jq -r '.missing_in_spec | length' target/spec-check/consistency_report.json)
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Features | $TOTAL_FEATURES |" >> $GITHUB_STEP_SUMMARY
            echo "| Total Issues | $TOTAL_ISSUES |" >> $GITHUB_STEP_SUMMARY
            echo "| Missing in docs | $MISSING_DOCS |" >> $GITHUB_STEP_SUMMARY
            echo "| Missing in spec | $MISSING_SPEC |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TOTAL_ISSUES" -eq 0 ]; then
              echo "✅ **All consistent!** Spec and implementation status are in sync." >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **$TOTAL_ISSUES issues found**. See artifacts for details." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Report generation failed. Check logs for errors." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Fail on critical errors
        if: steps.check.outcome == 'failure'
        run: |
          echo "::error::Spec consistency check failed with critical errors"
          exit 1
