name: CLI and Daemon Release

# Automated release pipeline for nyx-cli and nyx-daemon
# Creates GitHub releases with binaries for multiple platforms
on:
  push:
    tags:
      - 'cli-v*.*.*'
      - 'daemon-v*.*.*'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to release (cli or daemon)'
        required: true
        type: choice
        options:
          - cli
          - daemon
          - both
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  packages: write

jobs:
  # ==================== Prepare Release ====================
  
  prepare:
    name: Prepare Release
    runs-on: [self-hosted, linux]
    outputs:
      version: ${{ steps.version.outputs.version }}
      component: ${{ steps.component.outputs.component }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Extract version and component
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            COMPONENT="${{ github.event.inputs.component }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" =~ ^cli-v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              COMPONENT="cli"
            elif [[ "$TAG" =~ ^daemon-v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              COMPONENT="daemon"
            else
              echo "❁EInvalid tag format: $TAG"
              exit 1
            fi
            
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION (prerelease: $IS_PRERELEASE)"
      
      - name: Extract component
        id: component
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            COMPONENT="${{ github.event.inputs.component }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG" =~ ^cli-v.+$ ]]; then
              COMPONENT="cli"
            elif [[ "$TAG" =~ ^daemon-v.+$ ]]; then
              COMPONENT="daemon"
            fi
          fi
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT
          echo "🎯 Component: $COMPONENT"

  # ==================== Build Release Binaries ====================
  
  build-binaries:
    name: Build ${{ matrix.target }} (${{ needs.prepare.outputs.component }})
    runs-on: ${{ matrix.os }}
    needs: [prepare]
    if: needs.prepare.outputs.component == 'cli' || needs.prepare.outputs.component == 'daemon' || needs.prepare.outputs.component == 'both'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: [self-hosted, linux]
            target: x86_64-unknown-linux-gnu
            artifact_name_cli: nyx-cli-linux-x86_64
            artifact_name_daemon: nyx-daemon-linux-x86_64
            binary_ext: ''
          
          # Linux aarch64
          - os: [self-hosted, linux]
            target: aarch64-unknown-linux-gnu
            artifact_name_cli: nyx-cli-linux-aarch64
            artifact_name_daemon: nyx-daemon-linux-aarch64
            binary_ext: ''
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name_cli: nyx-cli-windows-x86_64.exe
            artifact_name_daemon: nyx-daemon-windows-x86_64.exe
            binary_ext: '.exe'
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name_cli: nyx-cli-macos-x86_64
            artifact_name_daemon: nyx-daemon-macos-x86_64
            binary_ext: ''
          
          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name_cli: nyx-cli-macos-aarch64
            artifact_name_daemon: nyx-daemon-macos-aarch64
            binary_ext: ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install protobuf compiler
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y protobuf-compiler
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install protobuf
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install protoc
          fi
        shell: bash
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-${{ matrix.target }}
      
      - name: Build nyx-cli
        if: needs.prepare.outputs.component == 'cli' || needs.prepare.outputs.component == 'both'
        run: |
          cargo build --package nyx-cli --release --target ${{ matrix.target }}
      
      - name: Build nyx-daemon
        if: needs.prepare.outputs.component == 'daemon' || needs.prepare.outputs.component == 'both'
        run: |
          cargo build --package nyx-daemon --release --target ${{ matrix.target }}
      
      - name: Strip binaries (Unix)
        if: runner.os != 'Windows'
        run: |
          if [[ "${{ needs.prepare.outputs.component }}" == "cli" ]] || [[ "${{ needs.prepare.outputs.component }}" == "both" ]]; then
            strip target/${{ matrix.target }}/release/nyx-cli${{ matrix.binary_ext }} || true
          fi
          if [[ "${{ needs.prepare.outputs.component }}" == "daemon" ]] || [[ "${{ needs.prepare.outputs.component }}" == "both" ]]; then
            strip target/${{ matrix.target }}/release/nyx-daemon${{ matrix.binary_ext }} || true
          fi
      
      - name: Create archives
        shell: bash
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          if [[ "${{ needs.prepare.outputs.component }}" == "cli" ]] || [[ "${{ needs.prepare.outputs.component }}" == "both" ]]; then
            mkdir -p dist-cli
            cp target/${{ matrix.target }}/release/nyx-cli${{ matrix.binary_ext }} dist-cli/
            cp nyx-cli/README.md dist-cli/ || true
            cp LICENSE-MIT dist-cli/ || true
            cp LICENSE-APACHE dist-cli/ || true
            
            cd dist-cli
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              7z a ../nyx-cli-$VERSION-${{ matrix.target }}.zip *
            else
              tar czf ../nyx-cli-$VERSION-${{ matrix.target }}.tar.gz *
            fi
            cd ..
          fi
          
          if [[ "${{ needs.prepare.outputs.component }}" == "daemon" ]] || [[ "${{ needs.prepare.outputs.component }}" == "both" ]]; then
            mkdir -p dist-daemon
            cp target/${{ matrix.target }}/release/nyx-daemon${{ matrix.binary_ext }} dist-daemon/
            cp nyx-daemon/README.md dist-daemon/ || true
            cp LICENSE-MIT dist-daemon/ || true
            cp LICENSE-APACHE dist-daemon/ || true
            
            cd dist-daemon
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              7z a ../nyx-daemon-$VERSION-${{ matrix.target }}.zip *
            else
              tar czf ../nyx-daemon-$VERSION-${{ matrix.target }}.tar.gz *
            fi
            cd ..
          fi
      
      - name: Generate checksums
        shell: bash
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [ -f "nyx-cli-$VERSION-${{ matrix.target }}.zip" ]; then
              sha256sum nyx-cli-$VERSION-${{ matrix.target }}.zip > nyx-cli-$VERSION-${{ matrix.target }}.zip.sha256
            fi
            if [ -f "nyx-daemon-$VERSION-${{ matrix.target }}.zip" ]; then
              sha256sum nyx-daemon-$VERSION-${{ matrix.target }}.zip > nyx-daemon-$VERSION-${{ matrix.target }}.zip.sha256
            fi
          else
            if [ -f "nyx-cli-$VERSION-${{ matrix.target }}.tar.gz" ]; then
              sha256sum nyx-cli-$VERSION-${{ matrix.target }}.tar.gz > nyx-cli-$VERSION-${{ matrix.target }}.tar.gz.sha256
            fi
            if [ -f "nyx-daemon-$VERSION-${{ matrix.target }}.tar.gz" ]; then
              sha256sum nyx-daemon-$VERSION-${{ matrix.target }}.tar.gz > nyx-daemon-$VERSION-${{ matrix.target }}.tar.gz.sha256
            fi
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            *.tar.gz
            *.zip
            *.sha256
          retention-days: 7

  # ==================== Create GitHub Release ====================
  
  create-release:
    name: Create GitHub Release
    runs-on: [self-hosted, linux]
    needs: [prepare, build-binaries]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize artifacts
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} release-assets/ \;
          ls -lh release-assets/
      
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          COMPONENT="${{ needs.prepare.outputs.component }}"
          
          cat > release-notes.md <<EOF
          # Release $VERSION - $COMPONENT
          
          ## What's New
          
          This release includes the following updates for \`nyx-$COMPONENT\`:
          
          - Pure Rust implementation with zero C/C++ dependencies
          - Improved performance and stability
          - Enhanced security with authentication support
          - Comprehensive configuration management
          - Cross-platform support (Linux, Windows, macOS)
          
          ## Installation
          
          ### Download Binaries
          
          Download the appropriate archive for your platform from the Assets section below.
          
          ### Extract and Install
          
          \`\`\`bash
          # Linux/macOS
          tar xzf nyx-$COMPONENT-$VERSION-<target>.tar.gz
          sudo mv nyx-$COMPONENT /usr/local/bin/
          
          # Windows
          # Extract the .zip file and add the directory to your PATH
          \`\`\`
          
          ### Verify Installation
          
          \`\`\`bash
          nyx-$COMPONENT --version
          \`\`\`
          
          ## Documentation
          
          - [CLI Usage Guide](https://github.com/SeleniaProject/NyxNet/blob/main/docs/CLI_DAEMON_GUIDE.md)
          - [Daemon README](https://github.com/SeleniaProject/NyxNet/blob/main/nyx-daemon/README.md)
          - [CLI README](https://github.com/SeleniaProject/NyxNet/blob/main/nyx-cli/README.md)
          
          ## Platform Support
          
          - ✁ELinux x86_64
          - ✁ELinux aarch64
          - ✁EWindows x86_64
          - ✁EmacOS x86_64 (Intel)
          - ✁EmacOS aarch64 (Apple Silicon)
          
          ## Checksums
          
          SHA256 checksums are provided for all artifacts. Verify your download:
          
          \`\`\`bash
          sha256sum -c nyx-$COMPONENT-$VERSION-<target>.<ext>.sha256
          \`\`\`
          
          ## Support
          
          - Report issues: https://github.com/SeleniaProject/NyxNet/issues
          - Documentation: https://github.com/SeleniaProject/NyxNet/tree/main/docs
          EOF
          
          cat release-notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.component }} v${{ needs.prepare.outputs.version }}
          tag_name: ${{ needs.prepare.outputs.component }}-v${{ needs.prepare.outputs.version }}
          body_path: release-notes.md
          files: release-assets/*
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release summary
        run: |
          echo "## 🎉 Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Component**: ${{ needs.prepare.outputs.component }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.prepare.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Assets" >> $GITHUB_STEP_SUMMARY
          ls -lh release-assets/ | tail -n +2 >> $GITHUB_STEP_SUMMARY
