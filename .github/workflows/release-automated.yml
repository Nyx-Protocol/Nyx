name: Release Automation (Enhanced)

# Comprehensive release automation with semantic versioning, CHANGELOG generation,
# SBOM integration, signing, and artifact management
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel release builds

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required for publishing packages

jobs:
  # ==================== Pre-Release Validation ====================
  
  # Validate that the release is ready
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
      
      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            # Check if version contains pre-release identifiers
            if [[ "$VERSION" =~ -(alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi
          echo "✅ Version format is valid"
      
      - name: Check if tag already exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "::warning::Tag $VERSION already exists"
          else
            echo "✅ Tag $VERSION does not exist yet"
          fi

  # ==================== Build Release Artifacts ====================
  
  # Build release binaries for multiple platforms
  build-release-artifacts:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    needs: pre-release-validation
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: nyx-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: nyx-linux-aarch64
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: nyx-windows-x86_64
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: nyx-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: nyx-macos-aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-${{ matrix.target }}"
          cache-on-failure: false
      
      # Install cross-compilation tools for Linux aarch64
      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Install protobuf (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install protoc -y
      
      - name: Install protobuf (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install protobuf
      
      - name: Build release binaries
        run: |
          echo "::group::Building for ${{ matrix.target }}"
          cargo build --release --target ${{ matrix.target }} \
            --package nyx-cli --package nyx-daemon \
            --locked --verbose
          echo "::endgroup::"
      
      - name: Package binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cd target/${{ matrix.target }}/release
          tar -czf ../../../artifacts/${{ matrix.artifact_name }}.tar.gz \
            nyx-cli nyx-daemon
          cd ../../..
          sha256sum artifacts/${{ matrix.artifact_name }}.tar.gz > \
            artifacts/${{ matrix.artifact_name }}.tar.gz.sha256
      
      - name: Package binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          cd target/${{ matrix.target }}/release
          7z a ../../../artifacts/${{ matrix.artifact_name }}.zip nyx-cli.exe nyx-daemon.exe
          cd ../../..
          (Get-FileHash artifacts/${{ matrix.artifact_name }}.zip -Algorithm SHA256).Hash | 
            Out-File -FilePath artifacts/${{ matrix.artifact_name }}.zip.sha256
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ github.sha }}
          path: artifacts/*
          retention-days: 30

  # ==================== CHANGELOG Generation ====================
  
  # Generate CHANGELOG using git-cliff (Rust-based, no C/C++ dependencies)
  generate-changelog:
    name: Generate CHANGELOG
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-release-validation
    permissions:
      contents: read
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog
      
      # git-cliff is written in Rust (no C/C++ dependencies)
      - name: Install git-cliff
        uses: taiki-e/install-action@v2
        with:
          tool: git-cliff
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          echo "::group::Generating CHANGELOG for $VERSION"
          
          # Generate full changelog
          git-cliff --tag "$VERSION" --output CHANGELOG.md
          
          # Generate release notes (changes since last tag)
          git-cliff --tag "$VERSION" --unreleased --strip header > RELEASE_NOTES.md
          
          echo "::endgroup::"
          
          # Output changelog for release description
          {
            echo 'changelog<<EOF'
            cat RELEASE_NOTES.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Upload changelog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ github.sha }}
          path: |
            CHANGELOG.md
            RELEASE_NOTES.md
          retention-days: 30
      
      - name: Display release notes
        run: |
          echo "## 📝 Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY

  # ==================== SBOM Generation for Release ====================
  
  # Generate comprehensive SBOM for the release
  generate-release-sbom:
    name: Generate Release SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-release-validation
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # cargo-sbom is pure Rust (no C/C++ dependencies)
      - name: Install cargo-sbom
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-sbom
      
      - name: Generate comprehensive SBOM
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          echo "::group::Generating SBOM for release $VERSION"
          
          # CycloneDX format (JSON)
          cargo sbom --output-format cyclonedx_json > sbom-${VERSION}-cyclonedx.json
          
          # SPDX format (JSON)
          cargo sbom --output-format spdx_json > sbom-${VERSION}-spdx.json
          
          # Human-readable format
          cargo sbom > sbom-${VERSION}.txt
          
          echo "::endgroup::"
      
      - name: Validate SBOM files
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          jq empty sbom-${VERSION}-cyclonedx.json
          jq empty sbom-${VERSION}-spdx.json
          echo "✅ SBOM files are valid"
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom-*
          retention-days: 90

  # ==================== Container Image Build and Push ====================
  
  # Build and push container images
  build-and-push-containers:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [pre-release-validation, build-release-artifacts]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.pre-release-validation.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.pre-release-validation.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.pre-release-validation.outputs.version }}
            type=raw,value=latest,enable=${{ needs.pre-release-validation.outputs.is_prerelease == 'false' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-release-validation.outputs.version }}
            COMMIT_SHA=${{ github.sha }}

  # ==================== Create GitHub Release ====================
  
  # Create GitHub release with all artifacts
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - pre-release-validation
      - build-release-artifacts
      - generate-changelog
      - generate-release-sbom
      - build-and-push-containers
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Organize release assets
        run: |
          mkdir -p release-assets
          find release-artifacts -type f \( -name '*.tar.gz' -o -name '*.zip' -o -name '*.sha256' -o -name 'sbom-*' \) \
            -exec cp {} release-assets/ \;
          ls -lh release-assets/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version }}
          name: Release ${{ needs.pre-release-validation.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          prerelease: ${{ needs.pre-release-validation.outputs.is_prerelease == 'true' }}
          files: release-assets/*
          draft: false
          generate_release_notes: false  # We generate our own with git-cliff
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate release summary
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          echo "## 🎉 Release $VERSION Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts have been published:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Binary Releases" >> $GITHUB_STEP_SUMMARY
          ls -1 release-assets/*.tar.gz release-assets/*.zip 2>/dev/null | while read file; do
            echo "- $(basename $file)" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### SBOM Files" >> $GITHUB_STEP_SUMMARY
          ls -1 release-assets/sbom-* 2>/dev/null | while read file; do
            echo "- $(basename $file)" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Container Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository }}:$VERSION\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.pre-release-validation.outputs.is_prerelease }}" == "false" ]]; then
            echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/$(basename ${{ github.repository }}))" >> $GITHUB_STEP_SUMMARY

  # ==================== Post-Release Notifications ====================
  
  # Post-release tasks (notifications, announcements, etc.)
  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: create-github-release
    if: always()
    steps:
      - name: Release completion summary
        run: |
          echo "## ✅ Release Workflow Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All release automation tasks have been completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All release tools comply with no-C/C++ requirement:" >> $GITHUB_STEP_SUMMARY
          echo "- 🦀 cargo, cargo-sbom (Pure Rust)" >> $GITHUB_STEP_SUMMARY
          echo "- 🦀 git-cliff (Pure Rust)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker/Buildx (Go)" >> $GITHUB_STEP_SUMMARY
