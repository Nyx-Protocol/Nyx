name: CLI and Daemon CI/CD

# Specialized CI/CD pipeline for nyx-cli and nyx-daemon
# Includes cross-platform builds, integration tests, and performance benchmarks
on:
  push:
    branches: [main, develop]
    paths:
      - 'nyx-cli/**'
      - 'nyx-daemon/**'
      - 'nyx-sdk/**'
      - 'nyx-stream/**'
      - 'nyx-core/**'
      - '.github/workflows/cli-daemon-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'nyx-cli/**'
      - 'nyx-daemon/**'
      - 'nyx-sdk/**'
      - 'nyx-stream/**'
      - 'nyx-core/**'
  workflow_dispatch:
    inputs:
      skip_benchmarks:
        description: 'Skip performance benchmarks'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:
  # ==================== Build and Test CLI & Daemon ====================
  
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install protobuf compiler
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y protobuf-compiler
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install protobuf
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install protoc
          fi
        shell: bash
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.target }}
          cache-on-failure: true
      
      - name: Build nyx-daemon
        run: cargo build --package nyx-daemon --release --target ${{ matrix.target }}
      
      - name: Build nyx-cli
        run: cargo build --package nyx-cli --release --target ${{ matrix.target }}
      
      - name: Run nyx-daemon tests
        run: cargo test --package nyx-daemon --lib -- --test-threads=1
      
      - name: Run nyx-cli tests
        run: cargo test --package nyx-cli --bins --tests
      
      - name: Run nyx-sdk tests (required by CLI)
        run: cargo test --package nyx-sdk --lib
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/nyx-daemon${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            target/${{ matrix.target }}/release/nyx-cli${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 7

  # ==================== Integration Tests ====================
  
  integration-tests:
    name: Integration Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [build-and-test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: integration-${{ matrix.os }}
      
      - name: Build daemon and CLI
        run: |
          cargo build --package nyx-daemon --release
          cargo build --package nyx-cli --release
      
      - name: Start daemon (Unix)
        if: runner.os != 'Windows'
        run: |
          ./target/release/nyx-daemon &
          DAEMON_PID=$!
          echo "DAEMON_PID=$DAEMON_PID" >> $GITHUB_ENV
          sleep 3
      
      - name: Start daemon (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $process = Start-Process -FilePath "target\release\nyx-daemon.exe" -PassThru -WindowStyle Hidden
          echo "DAEMON_PID=$($process.Id)" >> $env:GITHUB_ENV
          Start-Sleep -Seconds 3
      
      - name: Test CLI commands
        shell: bash
        run: |
          set -e
          
          # Test info command
          ./target/release/nyx-cli info
          
          # Test compliance command
          ./target/release/nyx-cli compliance
          
          # Test config show
          ./target/release/nyx-cli config show
          
          # Test list-versions
          ./target/release/nyx-cli list-versions
          
          # Test snapshot creation
          ./target/release/nyx-cli snapshot --description "CI Test"
          
          # Test update-config
          ./target/release/nyx-cli update-config --set 'log_level="debug"'
          
          # Test rollback
          ./target/release/nyx-cli rollback 1 || true
          
          echo "✁EAll CLI commands executed successfully"
      
      - name: Stop daemon (Unix)
        if: runner.os != 'Windows' && always()
        run: |
          if [ ! -z "$DAEMON_PID" ]; then
            kill $DAEMON_PID || true
          fi
      
      - name: Stop daemon (Windows)
        if: runner.os == 'Windows' && always()
        shell: powershell
        run: |
          if ($env:DAEMON_PID) {
            Stop-Process -Id $env:DAEMON_PID -Force -ErrorAction SilentlyContinue
          }

  # ==================== Performance Benchmarks ====================
  
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event.inputs.skip_benchmarks != 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: benchmarks
      
      - name: Run daemon benchmarks
        run: cargo bench --package nyx-daemon --bench '*' -- --output-format bencher | tee daemon-bench.txt
      
      - name: Run CLI benchmarks
        run: cargo bench --package nyx-cli --bench '*' -- --output-format bencher | tee cli-bench.txt || true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            daemon-bench.txt
            cli-bench.txt
          retention-days: 30
      
      - name: Comment benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 📊 Performance Benchmark Results\n\n';
            
            try {
              const daemonBench = fs.readFileSync('daemon-bench.txt', 'utf8');
              comment += '### nyx-daemon\n```\n' + daemonBench + '\n```\n\n';
            } catch (e) {
              comment += '### nyx-daemon\nNo benchmark results available\n\n';
            }
            
            try {
              const cliBench = fs.readFileSync('cli-bench.txt', 'utf8');
              comment += '### nyx-cli\n```\n' + cliBench + '\n```\n';
            } catch (e) {
              comment += '### nyx-cli\nNo benchmark results available\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ==================== Static Analysis ====================
  
  clippy-daemon-cli:
    name: Clippy (Daemon & CLI)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: clippy
      
      - name: Run Clippy on nyx-daemon
        run: |
          cargo clippy --package nyx-daemon --all-features -- -D warnings
      
      - name: Run Clippy on nyx-cli
        run: |
          cargo clippy --package nyx-cli --all-features -- -D warnings

  # ==================== Security Audit ====================
  
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      
      - name: Run security audit
        run: |
          cargo audit --deny warnings \
            --ignore RUSTSEC-2023-0089 \
            --ignore RUSTSEC-2024-0384 \
            --ignore RUSTSEC-2021-0127
      
      - name: Check for unsafe code
        run: |
          # Ensure no unsafe code in daemon and CLI
          ! grep -r "unsafe" nyx-daemon/src/ || (echo "❁EFound unsafe code in nyx-daemon" && exit 1)
          ! grep -r "unsafe" nyx-cli/src/ || (echo "❁EFound unsafe code in nyx-cli" && exit 1)
          echo "✁ENo unsafe code found"

  # ==================== Code Coverage ====================
  
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --locked
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: coverage
      
      - name: Run coverage for nyx-daemon
        run: |
          cargo tarpaulin --package nyx-daemon --out Xml --output-dir coverage/ -- --test-threads=1
      
      - name: Run coverage for nyx-cli
        run: |
          cargo tarpaulin --package nyx-cli --out Xml --output-dir coverage/
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: coverage/cobertura.xml
          flags: daemon-cli
          name: daemon-cli-coverage
          fail_ci_if_error: false

  # ==================== Documentation Build ====================
  
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install protobuf compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: docs
      
      - name: Build documentation
        run: |
          cargo doc --package nyx-daemon --no-deps
          cargo doc --package nyx-cli --no-deps
      
      - name: Check documentation links
        run: |
          cargo doc --package nyx-daemon --no-deps --document-private-items
          cargo doc --package nyx-cli --no-deps --document-private-items
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/
          retention-days: 30

  # ==================== Summary ====================
  
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, clippy-daemon-cli, security-audit, coverage, docs]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "❁EBuild and test failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❁EIntegration tests failed"
            exit 1
          fi
          if [[ "${{ needs.clippy-daemon-cli.result }}" != "success" ]]; then
            echo "❁EClippy checks failed"
            exit 1
          fi
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "❁ESecurity audit failed"
            exit 1
          fi
          echo "✁EAll CI checks passed successfully"
