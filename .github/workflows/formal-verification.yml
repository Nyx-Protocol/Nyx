name: Formal Verification (TLA+)

# TLA+ formal verification and model checking
on:
  push:
    branches: [main, master, develop]
    paths:
      - 'formal/**'
      - 'nyx-conformance/**'
      - 'scripts/verify.py'
      - '.github/workflows/formal-verification.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'formal/**'
      - 'nyx-conformance/**'
      - 'scripts/verify.py'
  schedule:
    # Full formal verification weekly on Mondays at 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      verification_type:
        description: 'Type of verification to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - tla-only
          - rust-only
          - quick
      timeout:
        description: 'Verification timeout in seconds'
        required: false
        default: '600'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  VERIFICATION_TIMEOUT: ${{ github.event.inputs.timeout || '600' }}
  JAVA_OPTS: "-Xmx4g -Xms2g"

permissions:
  contents: read

jobs:
  # ==================== TLA+ Model Checking ====================
  
  # Quick TLA+ model checking for fast feedback
  tla-quick-check:
    name: TLA+ Quick Model Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.inputs.verification_type != 'rust-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache TLA+ tools
        uses: actions/cache@v4
        with:
          path: formal/tla2tools.jar
          key: tla-tools-${{ hashFiles('formal/**/*.tla') }}
          restore-keys: tla-tools-
      
      - name: Download TLA+ tools
        run: |
          cd formal
          if [ ! -f tla2tools.jar ]; then
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
          fi
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install jq bc || true
      
      - name: Run quick TLA+ verification
        run: |
          if [ -f scripts/verify.py ]; then
            python3 scripts/verify.py --tla-only --timeout ${{ env.VERIFICATION_TIMEOUT }} \
              --output tla_verification_quick.json
          else
            echo "⚠️ verify.py not found, running manual TLA+ checks"
            cd formal
            for spec in NyxCore.tla NyxProtocol.tla NyxMixNetwork.tla; do
              if [ -f "$spec" ]; then
                echo "Checking $spec..."
                java -Xmx4g -cp tla2tools.jar tlc2.TLC -workers auto -deadlock "$spec" || true
              fi
            done
          fi
        continue-on-error: true
      
      - name: Upload TLA+ quick results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tla-quick-results
          path: |
            tla_verification_quick.json
            formal/states/
          retention-days: 30
          if-no-files-found: ignore

  # Comprehensive TLA+ model checking
  tla-full-verification:
    name: TLA+ Full Verification
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ github.event_name == 'schedule' || github.event.inputs.verification_type == 'full' || github.event.inputs.verification_type == 'tla-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache TLA+ tools
        uses: actions/cache@v4
        with:
          path: formal/tla2tools.jar
          key: tla-tools-${{ hashFiles('formal/**/*.tla') }}
          restore-keys: tla-tools-
      
      - name: Download TLA+ tools
        run: |
          cd formal
          if [ ! -f tla2tools.jar ]; then
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
          fi
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install jq bc || true
      
      - name: Run comprehensive TLA+ verification
        run: |
          if [ -f scripts/verify.py ]; then
            python3 scripts/verify.py --tla-only --timeout 3600 \
              --output tla_verification_full.json
          else
            echo "⚠️ verify.py not found, running manual comprehensive checks"
            cd formal
            for spec in *.tla; do
              if [ -f "$spec" ]; then
                echo "Verifying $spec..."
                java -Xmx4g -cp tla2tools.jar tlc2.TLC -workers auto \
                  -coverage 60 -deadlock "$spec" || true
              fi
            done
          fi
        continue-on-error: true
      
      - name: Generate TLA+ coverage report
        if: always()
        run: |
          if [ -f scripts/generate-verification-report.py ]; then
            python3 scripts/generate-verification-report.py \
              tla_verification_full.json \
              --output tla_coverage_report.json \
              --html tla_report.html || true
          fi
      
      - name: Upload TLA+ full results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tla-full-results
          path: |
            tla_verification_full.json
            tla_coverage_report.json
            tla_report.html
            formal/states/
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Rust Conformance Testing ====================
  
  # Rust-side conformance and property testing
  rust-conformance:
    name: Rust Conformance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.event.inputs.verification_type != 'tla-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "conformance"
          cache-on-failure: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Run conformance tests (all features)
        run: |
          cargo test --package nyx-conformance --all-features \
            --no-fail-fast -- --nocapture
      
      - name: Run property-based tests
        run: |
          cargo test --package nyx-conformance --all-features \
            --lib -- --nocapture proptest
        continue-on-error: true
      
      - name: Generate conformance report
        if: always()
        run: |
          mkdir -p conformance-reports
          export NYX_CI_OUTPUT_DIR=./conformance-reports
          cargo test --package nyx-conformance --all-features \
            --no-fail-fast -- --nocapture || true
      
      - name: Upload conformance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-conformance-reports
          path: conformance-reports/
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Cross-Verification ====================
  
  # Cross-check TLA+ specs against Rust implementation
  cross-verification:
    name: Cross-Verification (TLA+ ↔ Rust)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [tla-quick-check, rust-conformance]
    if: ${{ always() && github.event.inputs.verification_type == 'full' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download TLA+ results
        uses: actions/download-artifact@v4
        with:
          name: tla-quick-results
          path: tla-results/
        continue-on-error: true
      
      - name: Download Rust conformance results
        uses: actions/download-artifact@v4
        with:
          name: rust-conformance-reports
          path: rust-results/
        continue-on-error: true
      
      - name: Perform cross-verification analysis
        run: |
          if [ -f scripts/cross-verify.py ]; then
            python3 scripts/cross-verify.py \
              --tla-results tla-results/ \
              --rust-results rust-results/ \
              --output cross-verification-report.json || true
          else
            echo "ℹ️ Cross-verification script not available"
            echo "Manual review of TLA+ and Rust results required"
          fi
      
      - name: Upload cross-verification report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-verification-report
          path: cross-verification-report.json
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Specification Validation ====================
  
  # Validate specification documents for consistency
  spec-validation:
    name: Specification Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install validation tools
        run: |
          pip install --upgrade pip
          pip install pyyaml markdown || true
      
      - name: Validate specification documents
        run: |
          if [ -f scripts/validate-specs.py ]; then
            python3 scripts/validate-specs.py \
              --spec-dir spec/ \
              --output spec-validation-report.json || true
          else
            echo "ℹ️ Checking specification files..."
            find spec/ -name "*.md" -type f | while read file; do
              echo "Validating: $file"
              # Basic markdown syntax check
              if command -v mdl &> /dev/null; then
                mdl "$file" || true
              fi
            done
          fi
      
      - name: Upload specification validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-validation-report
          path: spec-validation-report.json
          retention-days: 30
          if-no-files-found: ignore

  # ==================== Summary ====================
  
  formal-verification-success:
    name: Formal Verification Success
    runs-on: ubuntu-latest
    needs:
      - tla-quick-check
      - rust-conformance
      - spec-validation
    if: always()
    steps:
      - name: Generate verification summary
        run: |
          echo "## Formal Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TLA+ Quick Check | ${{ needs.tla-quick-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Conformance | ${{ needs.rust-conformance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spec Validation | ${{ needs.spec-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.tla-quick-check.result }}" == "success" ]] && \
             [[ "${{ needs.rust-conformance.result }}" == "success" ]] && \
             [[ "${{ needs.spec-validation.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All formal verification checks passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some verification checks require attention**" >> $GITHUB_STEP_SUMMARY
          fi

