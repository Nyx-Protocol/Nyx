name: Formal Verification (TLA+)

# TLA+ formal verification and model checking
on:
  push:
    branches: [main, master, develop]
    paths:
      - 'formal/**'
      - 'nyx-conformance/**'
      - 'scripts/verify.py'
      - '.github/workflows/formal-verification.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'formal/**'
      - 'nyx-conformance/**'
      - 'scripts/verify.py'
  schedule:
    # Full formal verification weekly on Mondays at 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      verification_type:
        description: 'Type of verification to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - tla-only
          - rust-only
          - quick
      timeout:
        description: 'Verification timeout in seconds'
        required: false
        default: '600'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  VERIFICATION_TIMEOUT: ${{ github.event.inputs.timeout || '600' }}
  JAVA_OPTS: "-Xmx4g -Xms2g"

permissions:
  contents: read

jobs:
  # ==================== TLA+ Model Checking ====================
  
  # Quick TLA+ model checking for fast feedback
  tla-quick-check:
    name: TLA+ Quick Model Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.inputs.verification_type != 'rust-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache TLA+ tools
        uses: actions/cache@v4
        with:
          path: formal/tla2tools.jar
          key: tla-tools-v1.8.0
          restore-keys: tla-tools-
      
      - name: Download TLA+ tools
        run: |
          cd formal
          if [ ! -f tla2tools.jar ]; then
            echo "Downloading TLA+ tools..."
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
            echo "TLA+ tools downloaded successfully"
          else
            echo "TLA+ tools already cached"
          fi
          
          # Verify JAR file
          if java -jar tla2tools.jar -h > /dev/null 2>&1; then
            echo "✅ TLA+ tools verified"
          else
            echo "❌ TLA+ tools verification failed, re-downloading..."
            rm -f tla2tools.jar
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
          fi
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install jq bc || true
      
      - name: Run quick TLA+ verification
        run: |
          cd formal
          chmod +x quick_verify.sh
          
          # Run quick verification with main modules
          echo "Running quick TLA+ verification on core modules..."
          ./quick_verify.sh 2>&1 | tee ../tla_verification_quick.log
          
          # Generate JSON summary
          cat > ../tla_verification_quick.json << 'EOF'
          {
            "timestamp": "$(date -Iseconds)",
            "type": "quick",
            "modules_tested": [
              "NyxBasicVerification",
              "NyxCryptography",
              "NyxNetworkLayer"
            ],
            "log_file": "tla_verification_quick.log"
          }
          EOF
        continue-on-error: true
      
      - name: Upload TLA+ quick results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tla-quick-results
          path: |
            tla_verification_quick.json
            tla_verification_quick.log
            formal/states/
            formal/verification_logs/
            formal/*_verify.log
          retention-days: 30
          if-no-files-found: ignore

  # Comprehensive TLA+ model checking
  tla-full-verification:
    name: TLA+ Full Verification
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ github.event_name == 'schedule' || github.event.inputs.verification_type == 'full' || github.event.inputs.verification_type == 'tla-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache TLA+ tools
        uses: actions/cache@v4
        with:
          path: formal/tla2tools.jar
          key: tla-tools-v1.8.0
          restore-keys: tla-tools-
      
      - name: Download TLA+ tools
        run: |
          cd formal
          if [ ! -f tla2tools.jar ]; then
            echo "Downloading TLA+ tools..."
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
            echo "TLA+ tools downloaded successfully"
          else
            echo "TLA+ tools already cached"
          fi
          
          # Verify JAR file
          if java -jar tla2tools.jar -h > /dev/null 2>&1; then
            echo "✅ TLA+ tools verified"
          else
            echo "❌ TLA+ tools verification failed, re-downloading..."
            rm -f tla2tools.jar
            curl -L -o tla2tools.jar \
              https://github.com/tlaplus/tlaplus/releases/download/v1.8.0/tla2tools.jar
          fi
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install jq bc || true
      
      - name: Run comprehensive TLA+ verification
        run: |
          cd formal
          chmod +x final_verification.sh
          
          # Run full verification with all modules
          echo "Running comprehensive TLA+ verification on all modules..."
          ./final_verification.sh 2>&1 | tee ../tla_verification_full.log
          
          # Generate JSON summary
          PASSED=$(grep -c "✓" ../tla_verification_full.log || echo "0")
          FAILED=$(grep -c "✗" ../tla_verification_full.log || echo "0")
          
          cat > ../tla_verification_full.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "type": "comprehensive",
            "modules_passed": $PASSED,
            "modules_failed": $FAILED,
            "log_file": "tla_verification_full.log"
          }
          EOF
        continue-on-error: true
      
      - name: Generate TLA+ coverage report
        if: always()
        run: |
          if [ -f scripts/generate-verification-report.py ]; then
            python3 scripts/generate-verification-report.py \
              tla_verification_full.json \
              --output tla_coverage_report.json \
              --html tla_report.html || true
          fi
      
      - name: Upload TLA+ full results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tla-full-results
          path: |
            tla_verification_full.json
            tla_verification_full.log
            tla_coverage_report.json
            tla_report.html
            formal/states/
            formal/verification_logs/
            formal/*_verify.log
            formal/VERIFICATION_*.md
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Rust Conformance Testing ====================
  
  # Rust-side conformance and property testing
  rust-conformance:
    name: Rust Conformance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ github.event.inputs.verification_type != 'tla-only' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "conformance"
          cache-on-failure: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Run conformance tests (all features)
        run: |
          cargo test --package nyx-conformance --all-features \
            --no-fail-fast -- --nocapture
      
      - name: Run property-based tests
        run: |
          cargo test --package nyx-conformance --all-features \
            --lib -- --nocapture proptest
        continue-on-error: true
      
      - name: Generate conformance report
        if: always()
        run: |
          mkdir -p conformance-reports
          export NYX_CI_OUTPUT_DIR=./conformance-reports
          cargo test --package nyx-conformance --all-features \
            --no-fail-fast -- --nocapture || true
      
      - name: Upload conformance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-conformance-reports
          path: conformance-reports/
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Cross-Verification ====================
  
  # Cross-check TLA+ specs against Rust implementation
  cross-verification:
    name: Cross-Verification (TLA+ ↔ Rust)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [tla-quick-check, rust-conformance]
    if: ${{ always() && github.event.inputs.verification_type == 'full' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Download TLA+ results
        uses: actions/download-artifact@v4
        with:
          name: tla-quick-results
          path: tla-results/
        continue-on-error: true
      
      - name: Download Rust conformance results
        uses: actions/download-artifact@v4
        with:
          name: rust-conformance-reports
          path: rust-results/
        continue-on-error: true
      
      - name: Perform cross-verification analysis
        run: |
          if [ -f scripts/cross-verify.py ]; then
            python3 scripts/cross-verify.py \
              --tla-results tla-results/ \
              --rust-results rust-results/ \
              --output cross-verification-report.json || true
          else
            echo "ℹ️ Cross-verification script not available"
            echo "Manual review of TLA+ and Rust results required"
          fi
      
      - name: Upload cross-verification report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-verification-report
          path: cross-verification-report.json
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Specification Validation ====================
  
  # Validate specification documents for consistency
  spec-validation:
    name: Specification Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install validation tools
        run: |
          pip install --upgrade pip
          pip install pyyaml markdown || true
      
      - name: Validate specification documents
        run: |
          if [ -f scripts/validate-specs.py ]; then
            python3 scripts/validate-specs.py \
              --spec-dir spec/ \
              --output spec-validation-report.json || true
          else
            echo "ℹ️ Checking specification files..."
            find spec/ -name "*.md" -type f | while read file; do
              echo "Validating: $file"
              # Basic markdown syntax check
              if command -v mdl &> /dev/null; then
                mdl "$file" || true
              fi
            done
          fi
      
      - name: Upload specification validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-validation-report
          path: spec-validation-report.json
          retention-days: 30
          if-no-files-found: ignore

  # ==================== Summary ====================
  
  formal-verification-success:
    name: Formal Verification Success
    runs-on: ubuntu-latest
    needs:
      - tla-quick-check
      - rust-conformance
      - spec-validation
    if: always()
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download verification artifacts
        uses: actions/download-artifact@v4
        with:
          name: tla-quick-results
          path: tla-results/
        continue-on-error: true
      
      - name: Generate verification summary
        id: summary
        run: |
          echo "## 🔍 Formal Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TLA+ Quick Check | ${{ needs.tla-quick-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Conformance | ${{ needs.rust-conformance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spec Validation | ${{ needs.spec-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Parse TLA+ results if available
          if [ -f tla-results/tla_verification_quick.log ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### TLA+ Verification Details" >> $GITHUB_STEP_SUMMARY
            PASSED=$(grep -c "✓" tla-results/tla_verification_quick.log 2>/dev/null || echo "0")
            FAILED=$(grep -c "✗" tla-results/tla_verification_quick.log 2>/dev/null || echo "0")
            echo "- Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Determine overall status
          if [[ "${{ needs.tla-quick-check.result }}" == "success" ]] && \
             [[ "${{ needs.rust-conformance.result }}" == "success" ]] && \
             [[ "${{ needs.spec-validation.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All formal verification checks passed**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some verification checks require attention**" >> $GITHUB_STEP_SUMMARY
            echo "status=warning" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Formal Verification Results\n\n';
            comment += '| Component | Status |\n';
            comment += '|-----------|--------|\n';
            comment += '| TLA+ Quick Check | ${{ needs.tla-quick-check.result }} |\n';
            comment += '| Rust Conformance | ${{ needs.rust-conformance.result }} |\n';
            comment += '| Spec Validation | ${{ needs.spec-validation.result }} |\n\n';
            
            if (fs.existsSync('tla-results/tla_verification_quick.log')) {
              const log = fs.readFileSync('tla-results/tla_verification_quick.log', 'utf8');
              const passed = (log.match(/✓/g) || []).length;
              const failed = (log.match(/✗/g) || []).length;
              comment += `### TLA+ Verification\n- ✅ Passed: ${passed}\n- ❌ Failed: ${failed}\n\n`;
            }
            
            if ('${{ steps.summary.outputs.status }}' === 'success') {
              comment += '✅ **All formal verification checks passed!**';
            } else {
              comment += '⚠️ **Some verification checks require attention. Please review the artifacts.**';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

