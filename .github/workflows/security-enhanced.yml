name: Security Audit and SBOM (Enhanced)

# Comprehensive security scanning with multiple tools and SBOM generation
# Eliminates C/C++ dependencies and uses pure Rust/Go/Python implementations
on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master, develop]
  schedule:
    # Run every Monday at 00:00 UTC for fresh vulnerability scanning
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      severity_threshold:
        description: 'Fail on vulnerabilities above this severity (low, moderate, high, critical)'
        required: false
        default: 'high'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical

# Cancel redundant runs for efficiency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

# Read-only permissions by default, escalate as needed
permissions:
  contents: read
  security-events: write  # For uploading SARIF results

jobs:
  # ==================== Rust Security Audit ====================
  
  # Cargo audit for Rust dependencies - pure Rust tool
  rust-cargo-audit:
    name: Rust Dependency Audit (cargo-audit)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # cargo-audit is a pure Rust tool (no C/C++ dependencies)
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      
      - name: Run cargo audit (JSON output)
        run: |
          echo "::group::Running cargo audit"
          cargo audit --json > cargo-audit-report.json || true
          echo "::endgroup::"
      
      - name: Run cargo audit (human-readable output)
        run: |
          echo "::group::Cargo audit results"
          cargo audit || EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::warning::Vulnerabilities detected by cargo-audit"
          fi
          echo "::endgroup::"
      
      - name: Generate audit summary
        if: always()
        run: |
          echo "## 🔒 Rust Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f cargo-audit-report.json ]; then
            # Parse JSON report
            vuln_count=$(jq '.vulnerabilities.count' cargo-audit-report.json || echo "0")
            warn_count=$(jq '.warnings | length' cargo-audit-report.json || echo "0")
            
            echo "- 🐛 Vulnerabilities: $vuln_count" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ Warnings: $warn_count" >> $GITHUB_STEP_SUMMARY
            
            if [ "$vuln_count" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Detected Vulnerabilities" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities.list[] | "- **\(.advisory.id)**: \(.advisory.title) (\(.package.name) v\(.package.version))"' cargo-audit-report.json >> $GITHUB_STEP_SUMMARY || true
            fi
          fi
      
      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cargo-audit-report-${{ github.sha }}
          path: cargo-audit-report.json
          retention-days: 90

  # Cargo deny for comprehensive dependency policy enforcement - pure Rust tool
  rust-cargo-deny:
    name: Rust Dependency Policy (cargo-deny)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # cargo-deny is a pure Rust tool (no C/C++ dependencies)
      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny
      
      - name: Run cargo deny check
        run: |
          echo "::group::Running cargo deny"
          cargo deny check --show-stats || EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::warning::Policy violations detected by cargo-deny"
          fi
          echo "::endgroup::"
      
      - name: Generate deny summary
        if: always()
        run: |
          echo "## 📋 Dependency Policy Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cargo-deny checks for:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Security advisories" >> $GITHUB_STEP_SUMMARY
          echo "- ⚖️ License compliance" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Duplicate dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Banned/unmaintained crates" >> $GITHUB_STEP_SUMMARY

  # OSV Scanner for comprehensive vulnerability detection - Go implementation (acceptable)
  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # OSV Scanner is written in Go (not C/C++), which is acceptable
      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1.9.0
        with:
          scan-args: |
            --recursive
            --format json
            --output osv-scan-results.json
            ./
        continue-on-error: true
      
      - name: Generate OSV summary
        if: always()
        run: |
          echo "## 🛡️ OSV Scanner Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f osv-scan-results.json ]; then
            vuln_count=$(jq '.results[].packages[].vulnerabilities | length' osv-scan-results.json 2>/dev/null | awk '{s+=$1} END {print s}' || echo "0")
            echo "- 🐛 Total vulnerabilities found: $vuln_count" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload OSV scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: osv-scan-results-${{ github.sha }}
          path: osv-scan-results.json
          retention-days: 90

  # ==================== SAST (Static Application Security Testing) ====================
  
  # Semgrep for pattern-based security analysis - Python implementation (acceptable)
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Semgrep is written in Python (not C/C++), which is acceptable
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/rust
            p/golang
            p/dockerfile
          generateSarif: true
        env:
          SEMGREP_RULES: auto
      
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
      
      - name: Generate Semgrep summary
        if: always()
        run: |
          echo "## 🔍 Semgrep SAST Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Scanned for security patterns in:" >> $GITHUB_STEP_SUMMARY
          echo "- 🦀 Rust code" >> $GITHUB_STEP_SUMMARY
          echo "- 🐹 Go code" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Dockerfiles" >> $GITHUB_STEP_SUMMARY

  # ==================== SBOM Generation ====================
  
  # Generate Software Bill of Materials (SBOM) for Rust workspace
  generate-sbom-rust:
    name: Generate SBOM (Rust)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # cargo-sbom is a pure Rust tool (no C/C++ dependencies)
      - name: Install cargo-sbom
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-sbom
      
      - name: Generate SBOM (CycloneDX JSON)
        run: |
          echo "::group::Generating SBOM in CycloneDX format"
          cargo sbom --output-format cyclonedx_json > sbom-cyclonedx.json
          echo "::endgroup::"
      
      - name: Generate SBOM (SPDX JSON)
        run: |
          echo "::group::Generating SBOM in SPDX format"
          cargo sbom --output-format spdx_json > sbom-spdx.json
          echo "::endgroup::"
      
      - name: Validate SBOM files
        run: |
          echo "::group::Validating SBOM files"
          jq empty sbom-cyclonedx.json && echo "✅ CycloneDX SBOM is valid JSON"
          jq empty sbom-spdx.json && echo "✅ SPDX SBOM is valid JSON"
          echo "::endgroup::"
      
      - name: Generate SBOM summary
        run: |
          echo "## 📦 SBOM Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count dependencies
          deps_count=$(jq '.components | length' sbom-cyclonedx.json || echo "0")
          echo "- 📊 Total dependencies: $deps_count" >> $GITHUB_STEP_SUMMARY
          echo "- 📄 Formats: CycloneDX, SPDX" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Direct Dependencies (Top 10)" >> $GITHUB_STEP_SUMMARY
          jq -r '.components[:10] | .[] | "- `\(.name)` v\(.version)"' sbom-cyclonedx.json >> $GITHUB_STEP_SUMMARY || true
      
      - name: Upload SBOM artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-rust-${{ github.sha }}
          path: |
            sbom-cyclonedx.json
            sbom-spdx.json
          retention-days: 90

  # Generate SBOM for Go HTTP Proxy
  generate-sbom-go:
    name: Generate SBOM (Go)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    defaults:
      run:
        working-directory: nyx-http-proxy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
      
      # CycloneDX Go module for SBOM generation - pure Go (acceptable)
      - name: Install cyclonedx-gomod
        run: |
          echo "::group::Installing cyclonedx-gomod"
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
          echo "::endgroup::"
      
      - name: Generate Go SBOM
        run: |
          echo "::group::Generating Go SBOM"
          cyclonedx-gomod mod -json -output sbom-go-cyclonedx.json
          echo "::endgroup::"
      
      - name: Generate Go SBOM summary
        run: |
          echo "## 📦 Go SBOM Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f sbom-go-cyclonedx.json ]; then
            deps_count=$(jq '.components | length' sbom-go-cyclonedx.json || echo "0")
            echo "- 📊 Go dependencies: $deps_count" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Go SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-go-${{ github.sha }}
          path: nyx-http-proxy/sbom-go-cyclonedx.json
          retention-days: 90

  # ==================== Secret Scanning ====================
  
  # Detect accidentally committed secrets and sensitive data
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
      
      # Gitleaks is written in Go (not C/C++), which is acceptable
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional for pro features
      
      - name: Generate secret scanning summary
        if: always()
        run: |
          echo "## 🔐 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Scanned entire git history for:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔑 API keys" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Passwords" >> $GITHUB_STEP_SUMMARY
          echo "- 🎫 Tokens" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Private keys" >> $GITHUB_STEP_SUMMARY
          echo "- 💳 Credentials" >> $GITHUB_STEP_SUMMARY

  # ==================== Dependency Graph and Alerts ====================
  
  # Submit dependency graph for GitHub Dependency Graph/Dependabot
  submit-dependency-graph:
    name: Submit Dependency Graph
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write  # Required to submit dependency graph
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      # Submit Cargo dependency graph
      - name: Submit Cargo dependency graph
        uses: actions/dependency-submission/cargo@v1
        with:
          manifest-path: ./Cargo.toml
      
      - name: Generate dependency graph summary
        run: |
          echo "## 📊 Dependency Graph Submission" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Dependency graph submitted to GitHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This enables:" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 Dependabot alerts" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Automated dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Dependency insights" >> $GITHUB_STEP_SUMMARY

  # ==================== Security Summary ====================
  
  # Aggregate all security scan results
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      - rust-cargo-audit
      - rust-cargo-deny
      - osv-scanner
      - semgrep-sast
      - generate-sbom-rust
      - generate-sbom-go
      - secret-scanning
      - submit-dependency-graph
    if: always()
    steps:
      - name: Generate comprehensive security summary
        run: |
          echo "## 🛡️ Comprehensive Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job status
          if [[ "${{ needs.rust-cargo-audit.result }}" == "success" ]]; then
            echo "✅ Cargo Audit: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Cargo Audit: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.rust-cargo-deny.result }}" == "success" ]]; then
            echo "✅ Cargo Deny: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Cargo Deny: Policy violations" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.osv-scanner.result }}" == "success" ]]; then
            echo "✅ OSV Scanner: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ OSV Scanner: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.semgrep-sast.result }}" == "success" ]]; then
            echo "✅ Semgrep SAST: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Semgrep SAST: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.secret-scanning.result }}" == "success" ]]; then
            echo "✅ Secret Scanning: No secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret Scanning: Secrets detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SBOM Generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.generate-sbom-rust.result }}" == "success" ]]; then
            echo "✅ Rust SBOM: Generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Rust SBOM: Generation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.generate-sbom-go.result }}" == "success" ]]; then
            echo "✅ Go SBOM: Generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Go SBOM: Generation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Security Compliance Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans use tools without C/C++ dependencies:" >> $GITHUB_STEP_SUMMARY
          echo "- 🦀 cargo-audit, cargo-deny, cargo-sbom (Pure Rust)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐹 OSV Scanner, Gitleaks (Go)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐍 Semgrep (Python)" >> $GITHUB_STEP_SUMMARY
