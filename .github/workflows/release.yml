name: Release Automation

# Automated release pipeline with versioning, changelog, and artifact generation
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required for publishing packages

jobs:
  # ==================== Version Validation ====================
  
  # Validate version and prepare release metadata
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
      
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            # Detect pre-release based on version string
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          echo "✅ Version format valid"

  # ==================== Build Release Artifacts ====================
  
  # Build release binaries for multiple platforms
  build-release-artifacts:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [prepare-release]
    timeout-minutes: 90
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nyx-linux-x86_64
          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: nyx-linux-aarch64
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nyx-macos-x86_64
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nyx-macos-aarch64
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: nyx-windows-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}
          cache-on-failure: true
      
      # OS-specific dependency installation
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
          # For cross-compilation
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
      
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf
      
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc -y
      
      - name: Build release binaries
        run: |
          cargo build --release --locked --target ${{ matrix.target }} \
            --package nyx-cli --package nyx-daemon
      
      - name: Package artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/nyx-cli dist/ || true
          cp target/${{ matrix.target }}/release/nyx-daemon dist/ || true
          cd dist
          tar -czf ${{ matrix.artifact_name }}.tar.gz *
          mv ${{ matrix.artifact_name }}.tar.gz ../
      
      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item target\${{ matrix.target }}\release\nyx-cli.exe dist\ -ErrorAction SilentlyContinue
          Copy-Item target\${{ matrix.target }}\release\nyx-daemon.exe dist\ -ErrorAction SilentlyContinue
          Compress-Archive -Path dist\* -DestinationPath ${{ matrix.artifact_name }}.zip
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Build Go HTTP Proxy ====================
  
  # Build Go HTTP Proxy for release
  build-go-proxy:
    name: Build Go HTTP Proxy (${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: [prepare-release]
    timeout-minutes: 30
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            artifact_name: nyx-http-proxy-linux-amd64
          - goos: linux
            goarch: arm64
            artifact_name: nyx-http-proxy-linux-arm64
          - goos: darwin
            goarch: amd64
            artifact_name: nyx-http-proxy-darwin-amd64
          - goos: darwin
            goarch: arm64
            artifact_name: nyx-http-proxy-darwin-arm64
          - goos: windows
            goarch: amd64
            artifact_name: nyx-http-proxy-windows-amd64
    defaults:
      run:
        working-directory: nyx-http-proxy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
      
      - name: Build Go HTTP Proxy
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -v -ldflags="-s -w" -o nyx-http-proxy${{ matrix.goos == 'windows' && '.exe' || '' }} .
      
      - name: Package artifacts
        run: |
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip ../${{ matrix.artifact_name }}.zip nyx-http-proxy.exe
          else
            tar -czf ../${{ matrix.artifact_name }}.tar.gz nyx-http-proxy
          fi
      
      - name: Upload Go proxy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.zip
          retention-days: 90
          if-no-files-found: ignore

  # ==================== Generate CHANGELOG ====================
  
  # Generate changelog from git history
  generate-changelog:
    name: Generate CHANGELOG
    runs-on: ubuntu-latest
    needs: [prepare-release]
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          echo "# Release v$VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "Changes since $PREV_TAG:" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> RELEASE_NOTES.md
          else
            echo "Initial release" >> RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Download the appropriate binary for your platform from the assets below." >> RELEASE_NOTES.md
      
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md
          retention-days: 90

  # ==================== Create GitHub Release ====================
  
  # Create GitHub release with all artifacts
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - prepare-release
      - build-release-artifacts
      - build-go-proxy
      - generate-changelog
    timeout-minutes: 30
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: List artifacts
        run: |
          find artifacts/ -type f
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          body_path: artifacts/release-notes/RELEASE_NOTES.md
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease == 'true' }}
          draft: false
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==================== Summary ====================
  
  release-success:
    name: Release Success
    runs-on: ubuntu-latest
    needs:
      - create-release
    steps:
      - name: Generate release summary
        run: |
          echo "## Release v${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release created successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release: ${{ needs.prepare-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts have been uploaded to the GitHub release." >> $GITHUB_STEP_SUMMARY

