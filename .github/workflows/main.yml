name: Main CI/CD Pipeline

# Trigger on all branches and pull requests for comprehensive coverage
on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution (use with caution)'
        required: false
        default: 'false'
        type: boolean

# Cancel in-progress runs for the same workflow/PR to save resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables for consistent behavior across all jobs
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

# Default permissions: read-only for security (escalate per job as needed)
permissions:
  contents: read

jobs:
  # ==================== Phase 1: Fast Feedback (Lint, Format, Check) ====================
  
  # Static analysis and code formatting checks - fastest feedback
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "lint-format"
          cache-on-failure: true
      
      - name: Check code formatting
        run: cargo fmt --all -- --check
      
      - name: Run Clippy (workspace-wide with all features)
        run: |
          cargo clippy --workspace --all-targets --all-features \
            --message-format=json -- -D warnings \
            | tee clippy-output.json
      
      - name: Upload Clippy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clippy-results
          path: clippy-output.json
          retention-days: 30

  # Cargo check for all feature combinations to detect compilation issues early
  cargo-check:
    name: Cargo Check (All Features)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "cargo-check"
          cache-on-failure: true
      
      # Install system dependencies for full compilation check
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Check workspace (default features)
        run: cargo check --workspace --locked
      
      - name: Check workspace (all features)
        run: cargo check --workspace --all-features --locked
      
      - name: Check workspace (no default features)
        run: cargo check --workspace --no-default-features --locked

  # ==================== Phase 2: Build and Test (Core Validation) ====================
  
  # Main build and test job for Linux
  build-and-test-linux:
    name: Build and Test (Linux)
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [lint-and-format, cargo-check]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-test-linux"
          cache-on-failure: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Install cargo-llvm-cov for coverage
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      
      - name: Build workspace (all features)
        run: cargo build --workspace --all-features --locked --verbose
      
      - name: Run workspace tests with coverage
        run: |
          cargo llvm-cov --workspace --all-features --no-fail-fast \
            --lcov --output-path lcov.info \
            --html --output-dir coverage-html
      
      - name: Run daemon metrics tests (experimental-metrics)
        run: |
          cargo test -p nyx-daemon --features experimental-metrics \
            --tests --no-fail-fast -- --nocapture
      
      - name: Run daemon OTLP exporter tests
        run: |
          cargo test -p nyx-daemon \
            --features experimental-metrics,otlp_exporter \
            --tests --no-fail-fast -- --nocapture
        env:
          NYX_OTLP_ENABLED: "0"
      
      - name: Run CLI alerts tests
        run: |
          cargo build -p nyx-cli --tests
          cargo test -p nyx-cli --test alerts_cmd --no-fail-fast -- --nocapture
      
      - name: Build mobile FFI with telemetry
        run: cargo build -p nyx-mobile-ffi --features telemetry
      
      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown
      
      - name: Run nyx-sdk-wasm tests
        run: |
          cargo test -p nyx-sdk-wasm --target wasm32-unknown-unknown \
            --no-fail-fast -- --nocapture
      
      - name: Upload coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-linux
          path: |
            lcov.info
            coverage-html/
          retention-days: 30
      
      - name: Generate coverage summary
        if: always()
        run: |
          cargo llvm-cov report --lcov --output-path - | \
            awk -F',' 'NR>1 {lines+=$6; hit+=$7} END {
              if (lines > 0) {
                cov = (hit / lines) * 100;
                printf "Line Coverage: %.2f%% (%d/%d lines)\n", cov, hit, lines
              }
            }'

  # Windows-specific build and test
  build-and-test-windows:
    name: Build and Test (Windows)
    runs-on: windows-latest
    timeout-minutes: 90
    needs: [lint-and-format, cargo-check]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-test-windows"
          cache-on-failure: true
      
      - name: Install protoc
        run: |
          choco install protoc -y
      
      - name: Build workspace
        run: cargo build --workspace --all-features --locked --verbose
      
      - name: Run workspace tests
        run: cargo test --workspace --all-features --no-fail-fast -- --nocapture
      
      - name: Build mobile FFI
        run: cargo build -p nyx-mobile-ffi --features telemetry

  # macOS-specific build and test
  build-and-test-macos:
    name: Build and Test (macOS)
    runs-on: macos-latest
    timeout-minutes: 90
    needs: [lint-and-format, cargo-check]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-test-macos"
          cache-on-failure: true
      
      - name: Install protobuf
        run: brew install protobuf
      
      - name: Build workspace
        run: cargo build --workspace --all-features --locked --verbose
      
      - name: Run workspace tests
        run: cargo test --workspace --all-features --no-fail-fast -- --nocapture

  # ==================== Phase 3: Go HTTP Proxy ====================
  
  # Go HTTP Proxy build, test, and coverage
  go-http-proxy:
    name: Go HTTP Proxy CI
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-format]
    permissions:
      contents: read
    defaults:
      run:
        working-directory: nyx-http-proxy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache-dependency-path: nyx-http-proxy/go.sum
      
      - name: Download Go dependencies
        run: go mod download
      
      - name: Verify Go dependencies
        run: go mod verify
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: nyx-http-proxy
          args: --timeout=10m
      
      - name: Build HTTP Proxy
        run: go build -v -o nyx-http-proxy ./...
      
      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out | tee coverage-summary.txt
      
      - name: Upload Go coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: |
            nyx-http-proxy/coverage.out
            nyx-http-proxy/coverage.html
            nyx-http-proxy/coverage-summary.txt
          retention-days: 30

  # ==================== Phase 4: Integration and Conformance Tests ====================
  
  # Compliance and conformance testing
  compliance-tests:
    name: Compliance and Conformance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-and-test-linux]
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "compliance"
          cache-on-failure: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Run core compliance gate
        run: |
          export NYX_REQUIRED_COMPLIANCE_LEVEL=core
          cargo test --package nyx-conformance ci_compliance_gate_main \
            --features hybrid -- --nocapture
      
      - name: Run compliance matrix
        run: |
          mkdir -p compliance-reports
          export NYX_CI_OUTPUT_DIR=./compliance-reports
          cargo test --package nyx-conformance ci_compliance_matrix_full \
            --features hybrid,multipath,telemetry -- --nocapture
      
      - name: Run feature compilation verification
        run: |
          cargo test --package nyx-conformance ci_feature_compilation_verification \
            --features hybrid,multipath,telemetry -- --nocapture
      
      - name: Run hierarchy validation
        run: |
          cargo test --package nyx-conformance ci_compliance_hierarchy_validation \
            --features hybrid,multipath,telemetry -- --nocapture
      
      - name: Upload compliance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: compliance-reports/
          retention-days: 30

  # ==================== Summary Job ====================
  
  # Job summary that fails if any critical job failed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - lint-and-format
      - cargo-check
      - build-and-test-linux
      - build-and-test-windows
      - build-and-test-macos
      - go-http-proxy
      - compliance-tests
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]] || \
             [[ "${{ needs.cargo-check.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test-linux.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test-windows.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test-macos.result }}" != "success" ]] || \
             [[ "${{ needs.go-http-proxy.result }}" != "success" ]] || \
             [[ "${{ needs.compliance-tests.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ All CI checks passed"
          fi

