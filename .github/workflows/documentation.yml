name: Documentation

# Build and publish documentation
on:
  push:
    branches: [main, master, develop]
    paths:
      - 'docs/**'
      - '**/*.md'
      - 'mkdocs.yml'
      - '**/src/**/*.rs'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'docs/**'
      - '**/*.md'
      - 'mkdocs.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # ==================== Rust Documentation ====================
  
  # Generate and validate Rust API documentation
  rust-docs:
    name: Rust API Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "docs"
          cache-on-failure: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcap-dev pkg-config protobuf-compiler
      
      - name: Generate Rust documentation
        run: |
          cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"
      
      - name: Check documentation coverage
        run: |
          echo "## Rust Documentation Coverage" > RUSTDOC_COVERAGE.md
          echo "" >> RUSTDOC_COVERAGE.md
          
          # Count documented vs undocumented items
          for pkg in nyx-core nyx-crypto nyx-transport nyx-mix nyx-fec \
                     nyx-stream nyx-telemetry nyx-control nyx-cli \
                     nyx-daemon nyx-sdk nyx-sdk-wasm nyx-conformance \
                     nyx-mobile-ffi; do
            echo "Checking documentation for $pkg..." >> RUSTDOC_COVERAGE.md
          done
      
      - name: Upload Rust documentation
        uses: actions/upload-artifact@v4
        with:
          name: rust-docs
          path: target/doc/
          retention-days: 30

  # ==================== Go Documentation ====================
  
  # Generate Go documentation
  go-docs:
    name: Go Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    defaults:
      run:
        working-directory: nyx-http-proxy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
      
      - name: Generate Go documentation
        run: |
          go doc -all > ../go-docs.txt
          echo "✅ Go documentation generated"
      
      - name: Upload Go documentation
        uses: actions/upload-artifact@v4
        with:
          name: go-docs
          path: go-docs.txt
          retention-days: 30

  # ==================== MkDocs Documentation ====================
  
  # Build MkDocs-based documentation site
  mkdocs-build:
    name: MkDocs Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install MkDocs and dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
      
      - name: Validate mkdocs.yml
        if: fileExists('mkdocs.yml')
        run: |
          if [ -f mkdocs.yml ]; then
            mkdocs build --strict --verbose
            echo "✅ MkDocs build successful"
          else
            echo "ℹ️ No mkdocs.yml found, skipping MkDocs build"
          fi
      
      - name: Upload MkDocs site
        if: fileExists('site')
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site
          path: site/
          retention-days: 30
          if-no-files-found: ignore

  # ==================== Markdown Validation ====================
  
  # Validate markdown files for consistency
  markdown-validation:
    name: Markdown Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
      
      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' \
            --ignore node_modules \
            --ignore target \
            --ignore .github \
            || true
      
      - name: Check for broken links
        run: |
          echo "ℹ️ Link checking would be performed here"
          echo "Consider using tools like lychee for comprehensive link validation"

  # ==================== Documentation Summary ====================
  
  docs-success:
    name: Documentation Success
    runs-on: ubuntu-latest
    needs:
      - rust-docs
      - go-docs
      - mkdocs-build
      - markdown-validation
    if: always()
    steps:
      - name: Generate documentation summary
        run: |
          echo "## Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Rust API Docs | ${{ needs.rust-docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Go Docs | ${{ needs.go-docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| MkDocs Build | ${{ needs.mkdocs-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Validation | ${{ needs.markdown-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.rust-docs.result }}" == "success" ]] && \
             [[ "${{ needs.go-docs.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All documentation builds successful**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Some documentation builds failed**" >> $GITHUB_STEP_SUMMARY
          fi

