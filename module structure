[1mdiff --git a/formal/NyxPerformanceModels.tla b/formal/NyxPerformanceModels.tla[m
[1mindex 52ef18b..57ba820 100644[m
[1m--- a/formal/NyxPerformanceModels.tla[m
[1m+++ b/formal/NyxPerformanceModels.tla[m
[36m@@ -1,5 +1,4 @@[m
 ---- MODULE NyxPerformanceModels ----[m
[31m-LOCAL INSTANCE NyxHelpers[m
 (****************************************************************************)[m
 (* Nyx Protocol - Performance Evaluation and Analysis Models               *)[m
 (*                                                                          *)[m
[36m@@ -14,13 +13,13 @@[m [mLOCAL INSTANCE NyxHelpers[m
 (*   - Scalability bounds and limits                                       *)[m
 (*   - Quality of Service guarantees                                       *)[m
 (****************************************************************************)[m
[31m-[m
[31m-EXTENDS Naturals, Sequences, FiniteSets, Integers, Reals, TLC,[m
[31m-[m
 (****************************************************************************)[m
 (* Common Helper Operators                                                  *)[m
 (****************************************************************************)[m
 [m
[32m+[m[32mEXTENDS Naturals, Sequences, FiniteSets, Integers, Reals, TLC,[m
[32m+[m[32mLOCAL INSTANCE NyxHelpers[m
[32m+[m
 \* Minimum of a set[m
 MIN(S) == IF S = {} THEN 0 ELSE CHOOSE x \in S : \A y \in S : x <= y[m
 [m
[36m@@ -51,9 +50,6 @@[m [mAverage(S) == IF S = {} THEN 0 ELSE Sum(S) / Cardinality(S)[m
         NyxCryptography, NyxNetworkLayer, NyxStreamManagement,[m
         NyxFaultTolerance[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Performance Constants and Parameters                                     *)[m
[31m-(****************************************************************************)[m
 [m
 \* Latency bounds (in milliseconds)[m
 MinLatency == 1[m
[36m@@ -75,9 +71,6 @@[m [mMaxNodes == 10000[m
 MaxStreamsPerConnection == 1000[m
 MaxConcurrentConnections == 100000[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Latency Models                                                           *)[m
[31m-(****************************************************************************)[m
 [m
 \* Network propagation delay model[m
 PropagationDelay(distance_km, medium) ==[m
[36m@@ -141,9 +134,6 @@[m [mLatencySLAViolation(mean_latency, std_dev, sla_threshold) ==[m
        THEN 1 - NormalCDF(z_score)  \* Probability of exceeding threshold[m
        ELSE 1[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Throughput Models                                                        *)[m
[31m-(****************************************************************************)[m
 [m
 \* Single stream throughput with flow control[m
 StreamThroughput(window_size, rtt, packet_size) ==[m
[36m@@ -181,9 +171,6 @@[m [mBandwidthUtilization(actual_throughput, link_capacity) ==[m
 FairShareThroughput(total_bandwidth, weight, total_weight) ==[m
     (total_bandwidth * weight) / total_weight[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Resource Utilization Models                                              *)[m
[31m-(****************************************************************************)[m
 [m
 \* CPU utilization for cryptographic operations[m
 CPUUtilizationCrypto(ops_per_second, cpu_cycles_per_op, cpu_frequency_hz) ==[m
[36m@@ -219,9 +206,6 @@[m [mThreadPoolUtilization(active_tasks, pool_size) ==[m
 FileDescriptorUsage(num_connections, num_files) ==[m
     num_connections * 2 + num_files  \* 2 FDs per connection[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Scalability Models                                                       *)[m
[31m-(****************************************************************************)[m
 [m
 \* Maximum connections based on resources[m
 MaxConnections ==[m
[36m@@ -263,9 +247,6 @@[m [mMultipathScalability(num_paths, coordination_overhead) ==[m
         actual_speedup == num_paths / (1 + coordination_overhead * (num_paths - 1))[m
     IN actual_speedup / ideal_speedup  \* Efficiency ratio[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Quality of Service Models                                                *)[m
[31m-(****************************************************************************)[m
 [m
 \* Priority-based delay bounds[m
 PriorityDelayBound(priority, base_delay, priority_levels) ==[m
[36m@@ -321,9 +302,6 @@[m [mPlatinum == [class_name |-> "Platinum", min_bandwidth |-> 1000,[m
              max_latency |-> 50, max_jitter |-> 10,[m
              max_loss_rate |-> 0, priority |-> 7][m
 [m
[31m-(****************************************************************************)[m
[31m-(* Performance Optimization Models                                          *)[m
[31m-(****************************************************************************)[m
 [m
 \* Optimal window size calculation[m
 OptimalWindowSize(bdp, loss_rate) ==[m
[36m@@ -351,9 +329,6 @@[m [mOptimalBufferSize(bandwidth_bps, rtt_ms) ==[m
 PrefetchAmount(prediction_accuracy, window_size) ==[m
     (window_size * prediction_accuracy) / 100[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Performance Measurement and Analysis                                     *)[m
[31m-(****************************************************************************)[m
 [m
 \* Performance metrics collection[m
 PerformanceMetrics == [[m
[36m@@ -396,9 +371,6 @@[m [mPercentiles(samples) ==[m
         p999 |-> LatencyPercentile(samples, 999\div10)[m
     ][m
 [m
[31m-(****************************************************************************)[m
[31m-(* Cost Models                                                               *)[m
[31m-(****************************************************************************)[m
 [m
 \* Computational cost (CPU cycles)[m
 ComputationalCost(operation) ==[m
[36m@@ -426,9 +398,6 @@[m [mStorageCost(data_type, quantity) ==[m
       [] data_type = "routing_table_entry" -> quantity * 128[m
       [] OTHER -> quantity * 512[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Capacity Planning Models                                                 *)[m
[31m-(****************************************************************************)[m
 [m
 \* Required capacity calculation[m
 RequiredCapacity ==[m
[36m@@ -454,9 +423,6 @@[m [mOverprovisioningFactor(service_type) ==[m
       [] service_type = "development" -> 1[m
       [] OTHER -> 15 \div 10[m
 [m
[31m-(****************************************************************************)[m
[31m-(* Benchmark Scenarios                                                      *)[m
[31m-(****************************************************************************)[m
 [m
 \* Baseline performance benchmark[m
 BaselineBenchmark ==[m
